[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/testpost/index.html",
    "href": "posts/testpost/index.html",
    "title": "First Post",
    "section": "",
    "text": "This is my first post to this site. Here’s some pseudo-code:\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nattendance &lt;- read_csv(\"https://dwillis.github.io/sports-data-files/attendance.csv\")\n\n\nRows: 146 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): Institution, Conference\ndbl (11): 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "posts/willard-teams/index.html",
    "href": "posts/willard-teams/index.html",
    "title": "The Willard Way - Old School; Analyzing the UMD Basketball Coach’s Style",
    "section": "",
    "text": "We might not have any clue where our Maryland Men’s basketball team stands currently in terms of how good we actually are. Some may say we’re a solid tournament team, others see a middling Big Ten squad. Regardless, all of our fans want success. In order to do so, we need some sense of culture, and who else would we look to for that but our Head Coach, Kevin Willard.\nIn the past 8 years, 6 of his teams have earned March Madness bids. I’d say he’s solidified himself as a staple of our program at Maryland. But what does a Kevin Willard culture look like? Can we define it? Is it represented statistically? In today’s blog post, we will see what has been reflected in Kevin Willard’s teams over time, including his time as Seton Hall (2010-2022). The dataset that we use contains college basketball game logs from 2014 to now.\nBefore I went into the data, I decided to inquire about Coach Willard with a former basketball coach of mine who was a team manager at Seton Hall from 2017-2021. He told me that the goal of Willard’s program at Seton Hall was to create “40 minutes of hell” for opponents. It was described by he and other managers as a defense-first team that played aggressive against the ball and fast on both ends. Offensively, his strategy/ability was described as “subpar,” which was masked by star scorers like Consensus All-American/Big East POY Myles Powell. In terms of his two (and counting) years at Maryland, I’d say we’ve seen somewhat of the same. Our defense usually keeps us in big games, and our offense outside of now-NBA prospect Jahmir Young was pretty mediocre. Well, let’s see what else we can find in the data.\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(dplyr)\n\n\n\n\nCode\nncaahoops &lt;- read_csv(\"https://thescoop.org/sports-data-files/cbblogs1525.csv\")\n\n\nRows: 110084 Columns: 47\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (7): Season, Opponent, HomeAway, W_L, URL, Conference, Team\ndbl  (39): Game, TeamScore, OpponentScore, TeamFG, TeamFGA, TeamFGPCT, Team3...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nncaahoops &lt;- ncaahoops |&gt;\n  mutate(year = as.numeric(sub(\".*-\", \"\", Season)))\n\n\n\n\nCode\nseton &lt;- ncaahoops |&gt; filter(Team == \"Seton Hall\") |&gt; filter(year &lt;= 2022)\nmd &lt;- ncaahoops |&gt; filter(Team == \"Maryland\") |&gt; filter(year &gt;= 2023)\n\n\n\n\nCode\nbigeastw &lt;- ncaahoops |&gt; filter(Conference == \"Big East\" | Conference == \"Big East MBB\") |&gt; filter(year&lt;=2022)\nbigtenw &lt;- ncaahoops |&gt; filter(Conference == \"Big Ten MBB\") |&gt; filter(year &gt;= 2023)\n\n\nIn the above code, we have created new dataframes that will be the basis of our comparison, separating the teams and conferences that we want that Kevin Willard coached for and against.\nEssentially what I am doing in the below code is scaling all of the (numeric) data in terms of the average for the Big Ten and Big East respectively during Willard’s era. We are going to look at how his teams have done compared to their conferences.\n\n\nCode\n# Identify numeric columns, excluding \"Game\" and \"year\"\nnumeric_columns &lt;- sapply(bigeastw, is.numeric) & !(names(bigeastw) %in% c(\"Game\", \"year\"))\n\n# Make a copy of the original data and apply scaling\nscaled_bew &lt;- bigeastw\nscaled_bew[numeric_columns] &lt;- scale(bigeastw[numeric_columns])\n\n\n\n\nCode\n# Identify numeric columns, excluding \"Game\" and \"year\"\nnumeric_bt &lt;- sapply(bigtenw, is.numeric) & !(names(bigtenw) %in% c(\"Game\", \"year\"))\n\n# Make a copy of the original data and apply scaling\nscaled_bt &lt;- bigtenw\nscaled_bt[numeric_bt] &lt;- scale(bigtenw[numeric_bt])\n\n\nWe can now see that every stat is comparative to its average.\n\n\nCode\nhead(scaled_bew)\n\n\n# A tibble: 6 × 48\n  Season  Game Date       Opponent HomeAway W_L   TeamScore OpponentScore TeamFG\n  &lt;chr&gt;  &lt;dbl&gt; &lt;date&gt;     &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt;     &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;\n1 2021-…     1 2021-11-09 IUPUI    &lt;NA&gt;     W        -1.52        -2.06   -2.38 \n2 2021-…     2 2021-11-12 Central… &lt;NA&gt;     W         0.859       -1.54    0.142\n3 2021-…     3 2021-11-13 Troy     &lt;NA&gt;     W        -0.370       -1.03   -0.279\n4 2021-…     4 2021-11-17 Michiga… &lt;NA&gt;     L        -1.85         0.187  -2.17 \n5 2021-…     5 2021-11-22 Houston  N        L        -1.85        -0.0727 -2.38 \n6 2021-…     6 2021-11-23 Texas A… N        L        -2.01        -1.20   -1.96 \n# ℹ 39 more variables: TeamFGA &lt;dbl&gt;, TeamFGPCT &lt;dbl&gt;, Team3P &lt;dbl&gt;,\n#   Team3PA &lt;dbl&gt;, Team3PPCT &lt;dbl&gt;, TeamFT &lt;dbl&gt;, TeamFTA &lt;dbl&gt;,\n#   TeamFTPCT &lt;dbl&gt;, TeamOffRebounds &lt;dbl&gt;, TeamTotalRebounds &lt;dbl&gt;,\n#   TeamAssists &lt;dbl&gt;, TeamSteals &lt;dbl&gt;, TeamBlocks &lt;dbl&gt;, TeamTurnovers &lt;dbl&gt;,\n#   TeamPersonalFouls &lt;dbl&gt;, OpponentFG &lt;dbl&gt;, OpponentFGA &lt;dbl&gt;,\n#   OpponentFGPCT &lt;dbl&gt;, Opponent3P &lt;dbl&gt;, Opponent3PA &lt;dbl&gt;,\n#   Opponent3PPCT &lt;dbl&gt;, OpponentFT &lt;dbl&gt;, OpponentFTA &lt;dbl&gt;, …\n\n\nCode\nhead(scaled_bt)\n\n\n# A tibble: 6 × 48\n  Season  Game Date       Opponent HomeAway W_L   TeamScore OpponentScore TeamFG\n  &lt;chr&gt;  &lt;dbl&gt; &lt;date&gt;     &lt;chr&gt;    &lt;chr&gt;    &lt;chr&gt;     &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;\n1 2022-…     1 2022-11-07 Eastern… &lt;NA&gt;     W         1.08        -0.971   0.757\n2 2022-…     2 2022-11-11 Kansas … &lt;NA&gt;     W         0.999       -1.71    0.757\n3 2022-…     3 2022-11-14 Monmouth &lt;NA&gt;     W         2.37        -0.317   2.21 \n4 2022-…     4 2022-11-18 UCLA     N        W         0.437        0.0927  0.134\n5 2022-…     5 2022-11-20 Virginia N        L        -1.01         0.0927 -0.489\n6 2022-…     6 2022-11-25 Lindenw… &lt;NA&gt;     W         1.48        -0.808   2.00 \n# ℹ 39 more variables: TeamFGA &lt;dbl&gt;, TeamFGPCT &lt;dbl&gt;, Team3P &lt;dbl&gt;,\n#   Team3PA &lt;dbl&gt;, Team3PPCT &lt;dbl&gt;, TeamFT &lt;dbl&gt;, TeamFTA &lt;dbl&gt;,\n#   TeamFTPCT &lt;dbl&gt;, TeamOffRebounds &lt;dbl&gt;, TeamTotalRebounds &lt;dbl&gt;,\n#   TeamAssists &lt;dbl&gt;, TeamSteals &lt;dbl&gt;, TeamBlocks &lt;dbl&gt;, TeamTurnovers &lt;dbl&gt;,\n#   TeamPersonalFouls &lt;dbl&gt;, OpponentFG &lt;dbl&gt;, OpponentFGA &lt;dbl&gt;,\n#   OpponentFGPCT &lt;dbl&gt;, Opponent3P &lt;dbl&gt;, Opponent3PA &lt;dbl&gt;,\n#   Opponent3PPCT &lt;dbl&gt;, OpponentFT &lt;dbl&gt;, OpponentFTA &lt;dbl&gt;, …\n\n\nThere are a good amount of things that we have found. Now we will just extract the data points that we want so we can analyze them.\n\n\nCode\nlibrary(ggplot2)\nlibrary(dplyr)\n\n\n\n\nCode\n# Calculate conference averages for relevant stats\nbigeast_averages &lt;- bigeastw %&gt;%\n  summarise(\n    TeamFGPCT = mean(TeamFGPCT, na.rm = TRUE),\n    Team3PPCT = mean(Team3PPCT, na.rm = TRUE),\n    TeamFTPCT = mean(TeamFTPCT, na.rm = TRUE),\n    TeamOffRebounds = mean(TeamOffRebounds, na.rm = TRUE),\n    TeamTotalRebounds = mean(TeamTotalRebounds, na.rm = TRUE),\n    TeamSteals = mean(TeamSteals, na.rm = TRUE),\n    TeamBlocks = mean(TeamBlocks, na.rm = TRUE),\n    TeamPersonalFouls = mean(TeamPersonalFouls, na.rm = TRUE)) |&gt; mutate(Team = \"Big East\")\n    \nsh_stats &lt;- bigeastw %&gt;% filter(Team == \"Seton Hall\") |&gt;\n  summarise(\n    TeamFGPCT = mean(TeamFGPCT, na.rm = TRUE),\n    Team3PPCT = mean(Team3PPCT, na.rm = TRUE),\n    TeamFTPCT = mean(TeamFTPCT, na.rm = TRUE),\n    TeamOffRebounds = mean(TeamOffRebounds, na.rm = TRUE),\n    TeamTotalRebounds = mean(TeamTotalRebounds, na.rm = TRUE),\n    TeamSteals = mean(TeamSteals, na.rm = TRUE),\n    TeamBlocks = mean(TeamBlocks, na.rm = TRUE),\n    TeamPersonalFouls = mean(TeamPersonalFouls, na.rm = TRUE)\n  ) |&gt; mutate(Team = \"Seton Hall\")\n\n\nIf you desire, here is a preview of what we are going to compare.\n\n\nCode\n# Combine SH and Big East data\nsh_vs_bigeast &lt;- bind_rows(sh_stats, bigeast_averages)\nhead(sh_vs_bigeast)\n\n\n# A tibble: 2 × 9\n  TeamFGPCT Team3PPCT TeamFTPCT TeamOffRebounds TeamTotalRebounds TeamSteals\n      &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;           &lt;dbl&gt;             &lt;dbl&gt;      &lt;dbl&gt;\n1     0.444     0.341     0.687           10.4               34.7       6.73\n2     0.451     0.349     0.718            8.85              33.0       6.51\n# ℹ 3 more variables: TeamBlocks &lt;dbl&gt;, TeamPersonalFouls &lt;dbl&gt;, Team &lt;chr&gt;\n\n\nLet’s first compare Seton Hall’s shooting percentages to their conference:\n\n\nCode\n# Calculate conference averages excluding Seton Hall\nbigeast_shooting &lt;- bigeastw %&gt;%\n  filter(Team != \"Seton Hall\") %&gt;%\n  summarise(\n    FGPCT = mean(TeamFGPCT, na.rm = TRUE),\n    `3PPCT` = mean(Team3PPCT, na.rm = TRUE),\n    FTPCT = mean(TeamFTPCT, na.rm = TRUE)\n  ) %&gt;%\n  mutate(Team = \"Big East\")\n\n# Calculate Seton Hall’s averages\nseton_hall_shooting &lt;- bigeastw %&gt;%\n  filter(Team == \"Seton Hall\") %&gt;%\n  summarise(\n    FGPCT = mean(TeamFGPCT, na.rm = TRUE),\n    `3PPCT` = mean(Team3PPCT, na.rm = TRUE),\n    FTPCT = mean(TeamFTPCT, na.rm = TRUE)\n  ) %&gt;%\n  mutate(Team = \"Seton Hall\")\n\n\nNow we’ve just combined the two separate datasets from the entire Big East conference and Seton Hall individually. We can look at them together (we will visualize these soon).\n\n\nCode\n# Combine Seton Hall and conference data\nsh_shooting_comp &lt;- bind_rows(seton_hall_shooting, bigeast_shooting)\n\n# Reshape data to long format for ggplot\nsh_comparison_long &lt;- sh_shooting_comp %&gt;%\n  pivot_longer(cols = c(FGPCT, `3PPCT`, FTPCT),\n               names_to = \"Statistic\",\n               values_to = \"Value\")\nhead(sh_shooting_comp)\n\n\n# A tibble: 2 × 4\n  FGPCT `3PPCT` FTPCT Team      \n  &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;     \n1 0.444   0.341 0.687 Seton Hall\n2 0.451   0.350 0.722 Big East  \n\n\n\n\nCode\nshfg &lt;- ggplot(sh_comparison_long, aes(x = Statistic, y = Value, fill = Team)) +\n  geom_bar(stat = \"identity\", position = position_dodge()) +\n  labs(title = \"Defense Defined Success for Willard's Seton Hall Teams\", subtitle = \"Comparing Seton Hall to the Big East in different stats:\",\n       y = \"Percentage\",\n       x = \"Statistic\") +\n  scale_fill_manual(values = c(\"Seton Hall\" = \"blue\", \"Big East\" = \"gray\")) +\n  theme_minimal()\n\n\nNow Seton Hall’s rebounding:\n\n\nCode\n# Calculate conference averages for TeamOffRebounds and TeamTotalRebounds excluding Seton Hall\nbigeast_rebounds &lt;- bigeastw %&gt;%\n  filter(Team != \"Seton Hall\") %&gt;%\n  summarise(\n    OREB = mean(TeamOffRebounds, na.rm = TRUE),\n    TREB = mean(TeamTotalRebounds, na.rm = TRUE)\n  ) %&gt;%\n  mutate(Team = \"Big East\")\n\n# Calculate Seton Hall’s averages for the same variables\nseton_hall_rebounds &lt;- bigeastw %&gt;%\n  filter(Team == \"Seton Hall\") %&gt;%\n  summarise(\n    OREB = mean(TeamOffRebounds, na.rm = TRUE),\n    TREB = mean(TeamTotalRebounds, na.rm = TRUE)\n  ) %&gt;%\n  mutate(Team = \"Seton Hall\")\n\n\n\n\nCode\n# Combine Seton Hall and conference rebound data\nsh_rebounds_comp &lt;- bind_rows(seton_hall_rebounds, bigeast_rebounds)\n\n# Reshape data to long format for ggplot\nsh_rebounds_long &lt;- sh_rebounds_comp %&gt;%\n  pivot_longer(cols = c(OREB, TREB),\n               names_to = \"Statistic\",\n               values_to = \"Value\")\n\n\n\n\nCode\nshreb &lt;- ggplot(sh_rebounds_long, aes(x = Statistic, y = Value, fill = Team)) +\n  geom_bar(stat = \"identity\", position = position_dodge()) +\n  labs(title = \"\",\n       y = \"Average Rebounds\",\n       x = \"Statistic\") +\n  scale_fill_manual(values = c(\"Seton Hall\" = \"blue\", \"Big East\" = \"gray\")) +\n  theme_minimal()\n\n\nNow defense:\n\n\nCode\n# Calculate Big East averages for TeamSteals, TeamBlocks, and TeamPersonalFouls, excluding Seton Hall\nbigeast_defense &lt;- bigeastw %&gt;%\n  filter(Team != \"Seton Hall\") %&gt;%\n  summarise(\n    STL = mean(TeamSteals, na.rm = TRUE),\n    BLK = mean(TeamBlocks, na.rm = TRUE),\n    PF = mean(TeamPersonalFouls, na.rm = TRUE)\n  ) %&gt;%\n  mutate(Team = \"Big East\")\n\n# Calculate Seton Hall’s averages for the same variables\nseton_hall_defense &lt;- bigeastw %&gt;%\n  filter(Team == \"Seton Hall\") %&gt;%\n  summarise(\n    STL = mean(TeamSteals, na.rm = TRUE),\n    BLK = mean(TeamBlocks, na.rm = TRUE),\n    PF = mean(TeamPersonalFouls, na.rm = TRUE)\n  ) %&gt;%\n  mutate(Team = \"Seton Hall\")\n\n\n\n\nCode\n# Combine Seton Hall and conference defense data\nsh_defense_comp &lt;- bind_rows(seton_hall_defense, bigeast_defense)\n\n# Reshape data to long format for ggplot\nsh_defense_long &lt;- sh_defense_comp %&gt;%\n  pivot_longer(cols = c(STL, BLK, PF),\n               names_to = \"Statistic\",\n               values_to = \"Value\")\n\n\n\n\nCode\nshdef &lt;- ggplot(sh_defense_long, aes(x = Statistic, y = Value, fill = Team)) +\n  geom_bar(stat = \"identity\", position = position_dodge()) +\n  labs(title = \"\",\n       y = \"Per Game\",\n       x = \"Statistic\") +\n  scale_fill_manual(values = c(\"Seton Hall\" = \"blue\", \"Big East\" = \"gray\")) +\n  theme_minimal()\n\n\nNow that we have what we want for Seton Hall vs. the Big Eastl, we’ll do the same for Maryland versus the Big Ten:\n\n\nCode\n# Calculate Big Ten averages for relevant stats, excluding Maryland\nbigten_shooting &lt;- bigtenw %&gt;%\n  filter(Team != \"Maryland\") %&gt;%\n  summarise(\n    FGPCT = mean(TeamFGPCT, na.rm = TRUE),\n    `3PPCT` = mean(Team3PPCT, na.rm = TRUE),\n    FTPCT = mean(TeamFTPCT, na.rm = TRUE),\n    OREB = mean(TeamOffRebounds, na.rm = TRUE),\n    TREB = mean(TeamTotalRebounds, na.rm = TRUE),\n    STL = mean(TeamSteals, na.rm = TRUE),\n    BLK = mean(TeamBlocks, na.rm = TRUE),\n    PF = mean(TeamPersonalFouls, na.rm = TRUE)\n  ) %&gt;%\n  mutate(Team = \"Big Ten\")\n\n\n\n\nCode\n# Calculate Maryland's averages\nmaryland_stats &lt;- bigtenw %&gt;%\n  filter(Team == \"Maryland\") %&gt;%\n  summarise(\n    FGPCT = mean(TeamFGPCT, na.rm = TRUE),\n    `3PPCT` = mean(Team3PPCT, na.rm = TRUE),\n    FTPCT = mean(TeamFTPCT, na.rm = TRUE),\n    OREB = mean(TeamOffRebounds, na.rm = TRUE),\n    TREB = mean(TeamTotalRebounds, na.rm = TRUE),\n    STL = mean(TeamSteals, na.rm = TRUE),\n    BLK = mean(TeamBlocks, na.rm = TRUE),\n    PF = mean(TeamPersonalFouls, na.rm = TRUE)\n  ) %&gt;%\n  mutate(Team = \"Maryland\")\n\n\nHere’s another preview of what we will analyze/visualize for Maryland vs. its conference.\n\n\nCode\n# Combine Maryland and Big Ten data\nmd_vs_bigten &lt;- bind_rows(maryland_stats, bigten_shooting)\nhead(md_vs_bigten)\n\n\n# A tibble: 2 × 9\n  FGPCT `3PPCT` FTPCT  OREB  TREB   STL   BLK    PF Team    \n  &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;   \n1 0.434   0.309 0.720  9.48  32.0  6.23  4.13  16.7 Maryland\n2 0.455   0.347 0.719  8.65  32.9  6.06  3.67  16.1 Big Ten \n\n\nCode\n# Reshape data for ggplot\nmd_comparison_long &lt;- md_vs_bigten %&gt;%\n  pivot_longer(cols = c(FGPCT, `3PPCT`, FTPCT, OREB, \n                        TREB, STL, BLK, PF),\n               names_to = \"Statistic\",\n               values_to = \"Value\")\n\n\n\n\nCode\n# Shooting stats plot\nmd_shooting &lt;- ggplot(md_comparison_long %&gt;% \n                        filter(Statistic %in% c(\"FGPCT\", \"3PPCT\", \"FTPCT\")),\n                      aes(x = Statistic, y = Value, fill = Team)) +\n  geom_bar(stat = \"identity\", position = position_dodge()) +\n  labs(title = \"Hustle Stats Set Willard's Terps Apart, Too\", subtitle = \"Comparing UMD to the Big Ten in different stats:\",\n       y = \"Percentage\", x = \"Statistic\") +\n  scale_fill_manual(values = c(\"Maryland\" = \"red\", \"Big Ten\" = \"gray\")) +\n  theme_minimal()\n\n# Rebounding stats plot\nmd_rebounds &lt;- ggplot(md_comparison_long %&gt;%\n                        filter(Statistic %in% c(\"OREB\", \"TREB\")),\n                      aes(x = Statistic, y = Value, fill = Team)) +\n  geom_bar(stat = \"identity\", position = position_dodge()) +\n  labs(title = \"\",\n       y = \"Average Rebounds\", x = \"Statistic\") +\n  scale_fill_manual(values = c(\"Maryland\" = \"red\", \"Big Ten\" = \"gray\")) +\n  theme_minimal()\n\n# Defensive stats plot\nmd_defense &lt;- ggplot(md_comparison_long %&gt;%\n                       filter(Statistic %in% c(\"STL\", \"BLK\", \"PF\")),\n                     aes(x = Statistic, y = Value, fill = Team)) +\n  geom_bar(stat = \"identity\", position = position_dodge()) +\n  labs(title = \"\",\n       y = \"Per Game\", x = \"Statistic\") +\n  scale_fill_manual(values = c(\"Maryland\" = \"red\", \"Big Ten\" = \"gray\")) +\n  theme_minimal()\n\n\n\n\nCode\nlibrary(cowplot)\n\n\n\nAttaching package: 'cowplot'\n\n\nThe following object is masked from 'package:lubridate':\n\n    stamp\n\n\nCode\nplot_grid(shfg, shreb, shdef)\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_grid(md_shooting, md_rebounds, md_defense)\n\n\n\n\n\n\n\n\n\nWhen we look at these together, it tells us a few things about Kevin Willard’s teams over the years. First: I see a lot of average. Even after looking through the data manually, these were the some of the most drastic differences by his teams compared to the conference average.\nWith Seton Hall, his team excelled around the rim - offensive rebounding and rim protection set them apart on the defensive end. Otherwise, they had an average offensive scheme, which, as we mentioned, may have been kept afloat by a star player or two.\nWillard’s Maryland teams have been highlighted with poor 3PT shooting but an above average defense. Boy, there have been a few guys on his Maryland teams that I think Shaq could shoot better than from deep, and yet he still let them shoot.\nOverall, if we had to define the “Willard Way,” I would say the Seton Hall managers were spot on. Through these stats, I see a more hard-nosed, old-school style of basketball. He may not have all of the most skilled players on the floor at all times, so his teams must find a way to win in other ways than just skill, like simply trying to outwork their opponent. In terms of the eye test, from watching Maryland games I would say that Coach Willard’s basketball is more position-based than the other positionless teams in the rest of the NCAA. Again, since many of his players aren’t the “all-around” type like we see in modern basketball where everyone can shoot/defend/handle, each player fits into a role. As we discussed in class, I’m sure this core part of his philosophy has held true through his years, as he unfortunately hasn’t coached many immensely talented teams. His new class of players this year is led by future NBA lottery pick Derik Queen, but also has a good balance of talent and depth across the board. I’m curious to see if his style will adapt to fit these different types of players who can shoot and handle more. Will it be a blessing or a curse to have this new task?\nSpecial thanks to my old coach and his team for providing their insight."
  },
  {
    "objectID": "posts/third-and-six/index.html",
    "href": "posts/third-and-six/index.html",
    "title": "Maryland’s 2023 Loss to Illinois was a Fluke? Locksley’s Late Playcall Wasn’t as Bad as We Think",
    "section": "",
    "text": "Many Terp fans remember last football season when Coach Mike Locksley dialed up an infamous 0 yard rush play on 3rd and 6 inside the Illinois 30-yard line that led to a field goal to tie the game. This was followed by an Illinois game-winning field goal as time expired, and Maryland lost 27-24 at home to last year’s Big Ten West bottomfeeder. Professor Willis, who leads our JOUR479X class, described the “collective groan” that came from the home crowd as they watched the game slip away from them in a notoriously dull fashion. We were all understandably displeased with the play call, and its outcome. But there had to be some thought that came from this decision for Coach Locks, right? After doing some data analysis, it seems like he had the right idea in mind.\nIn order to do so, we must first load in the proper libraries to analyze college football data game logs from the past 6 years (ie. the Locksley era at Maryland).\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(cfbfastR)\n\nseasons &lt;- load_cfb_pbp(\n  seasons = c(2019,2020,2021,2022,2023,2024)\n)\n\n\nIn order to see how good/bad his decision was, we can analyze what everybody else in the NCAA has done in the exact same scenario. We can create a variable that includes only 3rd and 6 plays.\n\n\nCode\nthird_and_six &lt;- seasons|&gt; filter(down == \"3\", distance == \"6\")\n\n\nThere have been 15,661 times that this exact scenario has occured since 2019. We can look further into that and learn about what has happened on these plays, by using the group_by and summarize functions.\n\n\nCode\nthird_and_six |&gt; group_by(play_type) |&gt; \n  summarize(\n    count = n()\n  ) |&gt;\narrange(desc(count))\n\n\n# A tibble: 22 × 2\n   play_type                  count\n   &lt;chr&gt;                      &lt;int&gt;\n 1 Pass Reception              4676\n 2 Pass Incompletion           3866\n 3 Rush                        3173\n 4 Penalty                     1068\n 5 Timeout                      929\n 6 Sack                         800\n 7 Passing Touchdown            496\n 8 Interception Return          257\n 9 Rushing Touchdown            135\n10 Fumble Recovery (Opponent)   101\n# ℹ 12 more rows\n\n\nI thoroughly enjoyed learning that there have been two blocked field goals on third and six since 2019. Must’ve been at the end of a half/game.\nNow, let’s check out how often teams actually run the ball in this scenario - just to check if we are even in the right realm.\n\n\nCode\nthird_and_six_runs &lt;- third_and_six |&gt; filter(rush == \"1\")\n\ntotal_runs &lt;- third_and_six_runs |&gt;\n  summarize(\n    count = n()\n  ) |&gt;\n  pluck(1)\n\ntotal_runs/15661\n\n\n[1] 0.2163974\n\n\n21.64% of play calls on 3rd and 6 have been runs over the past 6 seasons. So most of the NCAA thinks that we should not have ran the ball. Now, to back this up, let’s see how successful these teams have been in this situation.\nWhether run or pass, we want to see the average yards gained on all of these\n\n\nCode\nthird_and_six |&gt;\n  summarise(\n    average_yds = mean(yards_gained))\n\n\n# A tibble: 1 × 1\n  average_yds\n        &lt;dbl&gt;\n1        5.20\n\n\nTeams almost get there, averaging about 5 yards per play on 3rd and 6. Usually any team would be satisfied with a 5 yard gain, but not in this scenario. I mean, I’m sure many defenses are pretty much just protecting that first down line.\nI’m going to try and help Coach Locks out here - we are going to check the average number of yards for each run play, too. Maybe it will show us that teams who run the ball on 3rd and 6 usually get there…\nTo do so, I found a variable in the dataset called “rush” which is a binary variable, labeled ‘1’ if a team ran the ball on a given play, and ‘0’ if they didn’t. We can use this variable to help us out.\n\n\nCode\nthird_and_six |&gt; filter(rush == \"1\") |&gt;\n  summarise(\n    average_yds = mean(yards_gained))\n\n\n# A tibble: 1 × 1\n  average_yds\n        &lt;dbl&gt;\n1        6.08\n\n\nHonestly, I’m surprised. I guess defenses were surprised as well. Of the 1 in every 5 or so times a run is called, it is expected to be successful in getting a first down (by this measure). We’re still not quite at a conclusion yet, though. We want to gather some more information first.\nFirst, who is leading the pack in run calls on third and six?\n\n\nCode\nthird_and_six |&gt; group_by(pos_team) |&gt; filter(rush == \"1\") |&gt;\n  summarise(\n    runcalls = n()\n  ) |&gt;\narrange(desc(runcalls))\n\n\n# A tibble: 280 × 2\n   pos_team         runcalls\n   &lt;chr&gt;               &lt;int&gt;\n 1 Navy                   60\n 2 Army                   51\n 3 Air Force              42\n 4 Georgia Southern       35\n 5 New Mexico             32\n 6 Ole Miss               31\n 7 Kent State             30\n 8 Baylor                 29\n 9 Georgia Tech           29\n10 Louisiana              29\n# ℹ 270 more rows\n\n\nNavy tops off the list, of course, with 60 runs on 3rd and 6. Besides the other teams that we’d expect (Army and Air Force), Georgia Southern comes in at 35 runs on 3rd and 6 over the past 6 seasons. While there are some decent teams at the top of this list, I can’t say that there are any championship-level offenses that operate by running the ball a lot on 3rd and 6. Coach Locksley may not be alone with that confident play call, however he is surrounded by mediocrity.\nWe can now get more specific and see what Maryland has done year-by-year since Mike Locksley was hired in 2019 in this scenario. It will be pretty much the same programming, but now we just have to filter so that we are only looking at Maryland. Additionally, let’s check out how many yards we gained per season on third and six.\n\n\nCode\nthird_and_six |&gt; group_by(pos_team,year) |&gt; filter(rush == \"1\",pos_team == \"Maryland\") |&gt;\n  summarise(\n    runcalls = n(),\n    yards = sum(yards_gained)\n  )\n\n\n`summarise()` has grouped output by 'pos_team'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 5 × 4\n# Groups:   pos_team [1]\n  pos_team  year runcalls yards\n  &lt;chr&gt;    &lt;int&gt;    &lt;int&gt; &lt;dbl&gt;\n1 Maryland  2019        1     3\n2 Maryland  2021        4    26\n3 Maryland  2022        6    36\n4 Maryland  2023        5    39\n5 Maryland  2024        1     5\n\n\nWow, we had a decent three-year stretch from 2021-2023 where our men seemed to be holding their own on these plays. Coach Locksley might have a point with what he was doing. Let’s zoom back out to include the scenario that we are passing, though. It is more useful for us to see if we should’ve passed based on how well we’ve done when not calling runs.\nWe can first look at every third and six play for Maryland and sort it by play_type so we can see the different distributions.\n\n\nCode\nthird_and_six |&gt; filter(pos_team == \"Maryland\") |&gt; group_by(play_type) |&gt;\n  summarize(\n    count = n()\n  )\n\n\n# A tibble: 11 × 2\n   play_type                  count\n   &lt;chr&gt;                      &lt;int&gt;\n 1 Field Goal Good                1\n 2 Fumble Recovery (Opponent)     2\n 3 Interception Return            1\n 4 Pass Incompletion             13\n 5 Pass Reception                20\n 6 Passing Touchdown              4\n 7 Penalty                        5\n 8 Rush                          16\n 9 Rushing Touchdown              1\n10 Sack                           6\n11 Timeout                        3\n\n\nTo do more analysis, we need to just use “regular” plays - ie. we don’t need to include field goals, timeouts, etc.). With the above summary, we have figured out every play type so we know what to select/filter by (done below):\n\n\nCode\nthird_and_six_md &lt;- third_and_six |&gt; filter(pos_team == \"Maryland\", play_type %in% c(\"Rush\", \"Rushing Touchdown\", \"Pass Incompletion\", \"Pass Reception\", \"Passing Touchdown\", \"Sack\"))\n\nthird_and_six_md_gains &lt;- third_and_six_md |&gt; select(year, week, def_pos_team, yards_gained, play_type, clock.minutes, period, yards_to_goal, rush)\nthird_and_six_md_gains\n\n\n────────────────────────────────────────────────────────────── cfbfastR 1.9.5 ──\n\n\n# A tibble: 60 × 9\n    year  week def_pos_team yards_gained play_type         clock.minutes period\n   &lt;int&gt; &lt;int&gt; &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;                     &lt;int&gt;  &lt;int&gt;\n 1  2019     1 Howard                  3 Rush                          7      3\n 2  2019     2 Syracuse                7 Pass Reception                6      3\n 3  2019     5 Penn State             18 Pass Reception               15      4\n 4  2019     9 Minnesota              -7 Sack                         10      1\n 5  2020     8 Northwestern            0 Pass Incompletion             8      2\n 6  2020     9 Minnesota               5 Pass Reception               10      2\n 7  2020     9 Minnesota              15 Pass Reception               10      4\n 8  2020     9 Minnesota             -16 Sack                          7      4\n 9  2020    10 Penn State             62 Passing Touchdown             0      1\n10  2020    10 Penn State              7 Pass Reception                6      2\n# ℹ 50 more rows\n# ℹ 2 more variables: yards_to_goal &lt;dbl&gt;, rush &lt;dbl&gt;\n\n\nNow we can see every individual log for when the Terps had this situation - I included some notable key factors that may play a part in our decision to support or hate Coach Locksley.\n\n\nCode\nthird_and_six_md_gains |&gt; group_by(rush) |&gt;\n  summarise(\n    count = n()\n    )\n\n\n# A tibble: 2 × 2\n   rush count\n  &lt;dbl&gt; &lt;int&gt;\n1     0    43\n2     1    17\n\n\nRemember, 1 is rush, 0 is not. Of the 60 times that Maryland has had a third and six situation in the Locksley era, they have passed it quite a bit more. But how often have we converted? Let’s map each gain on a scatterplot so we can visualize if passes or runs have been getting us more yardage over time.\nIn our case, since we selected only runs and passes, we can use the mutate() function to add a new variable (which I named play_call) which is a categorical variable that doesn’t just list a play as a 0 or a 1, or a pass completion/sack/etc, but instead just a run or a pass.\n\n\nCode\nthird_and_six_md_gains &lt;- third_and_six_md_gains |&gt; \n  mutate(play_call = ifelse(rush == 1, \"Rush\", \"Pass\"))\n\nhead(third_and_six_md_gains)\n\n\n────────────────────────────────────────────────────────────── cfbfastR 1.9.5 ──\n\n\n# A tibble: 6 × 10\n   year  week def_pos_team yards_gained play_type         clock.minutes period\n  &lt;int&gt; &lt;int&gt; &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;                     &lt;int&gt;  &lt;int&gt;\n1  2019     1 Howard                  3 Rush                          7      3\n2  2019     2 Syracuse                7 Pass Reception                6      3\n3  2019     5 Penn State             18 Pass Reception               15      4\n4  2019     9 Minnesota              -7 Sack                         10      1\n5  2020     8 Northwestern            0 Pass Incompletion             8      2\n6  2020     9 Minnesota               5 Pass Reception               10      2\n# ℹ 3 more variables: yards_to_goal &lt;dbl&gt;, rush &lt;dbl&gt;, play_call &lt;chr&gt;\n\n\nNow we can make our desired plot, with a number of different formatting techniques to make this readable for us. I tried to make a bit of a field for us, so that we can visualize a team getting.a first down.\n\n\nCode\nggplot(third_and_six_md_gains, aes(x = year, y = yards_gained, color = play_call)) +\n  geom_point(size = 2) + \n  scale_x_continuous(limits = c(2019,2024)) +\n  geom_hline(yintercept = 6, color = \"yellow\") +\n  geom_hline(yintercept = 0, color = \"blue\") + \n  annotate(\"text\", x=2023.5, y=8, label=\"1st Down\") +\n  annotate(\"text\", x=2019, y=-3, label=\"LOS\") +\n  labs(title = \"Hemby Brings in the Runs\",\n       x = \"Year\") +\n   scale_color_manual(values = c(\"Rush\" = \"black\", \"Pass\" = \"red\")) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nIn the past, Coach Locksley was extremely pass-heavy, but in 2022 when we began to use RB Roman Hemby, there seemed to be a shift in the playcalling. Either way, there doesn’t seem to be much matter whether we run or pass the ball as to if we get the yards we need.\nLet’s zoom in to look at data from last three years (the Hemby era). All we have to do is filter the years 2023 and 2024, and do the same thing again. We will use this to make our final conclusion to see if Coach Locksley could’ve passed the ball to win us the game.\n\n\nCode\nthird_and_six_md_gains_recent &lt;- third_and_six_md_gains |&gt; filter(year %in% c(2022,2023,2024)) |&gt;\n  mutate(play_call = ifelse(rush == 1, \"Rush\", \"Pass\"))\n\n# Create the plot\nggplot(third_and_six_md_gains_recent, aes(x = year, y = yards_gained, color = play_call)) +\n  geom_point(size = 2) + \n  scale_x_continuous(limits = c(2022,2025)) +\n  geom_hline(yintercept = 6, color = \"yellow\") +\n  geom_hline(yintercept = 0, color = \"blue\") + \n  annotate(\"text\", x=2024, y=8, label=\"1st Down\") +\n  annotate(\"text\", x=2023, y=-3, label=\"LOS\") +\n  labs(title = \"There is No True Tell of What Gets Us the Yards\",\n       x = \"Year\") +\n   scale_color_manual(values = c(\"Rush\" = \"black\", \"Pass\" = \"red\")) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nFrom this chart, there seems to be a pretty equal chance that we’d get the first whether we ran or passed the ball. But, contrary to initial fan belief that we should not have run that ball last October, it was just as good a call as any other play in the book…the runs get us there about half the time, as do pass plays. Additionally, many big pass plays there were, there were just as many losses or insufficient gains. So, Coach Locksley is off the hook, and he may have even had a good case that we should’ve ran the ball in that scenario. Maybe the solution would be to figure it out on the first two plays so that we aren’t in this scenario too often… I mean, it looks like this may happen at least once a game to the Terps, and I’d rather not flip a coin to estimate if we were going to get a first down or not…Especially if the game is on the line. At least third and six puts us far enough away from a potential first down so that we don’t have to watch a Billy Edwards tush push."
  },
  {
    "objectID": "posts/big-ten-rushing/index.html",
    "href": "posts/big-ten-rushing/index.html",
    "title": "Running as Slow as a Turtle: Maryland’s Run Game Is Not Succeeding",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nfootballlogs24 &lt;- read.csv(\"https://www.thescoop.org/sports-data-files/footballlogs24.csv\")\n\n\n\n\nCode\nbigten24 &lt;- footballlogs24 |&gt; filter(Conference == \"Big Ten Conference\")\n\n\nbtrush &lt;- bigten24 |&gt; group_by(TeamFull,Game, Opponent) |&gt; summarize(\n  `ryds/att` = sum(RushingYds)/sum(RushingAtt)\n)|&gt;\n  arrange(desc(`ryds/att`))\n\n\n`summarise()` has grouped output by 'TeamFull', 'Game'. You can override using\nthe `.groups` argument.\n\n\nCode\nhead(btrush)\n\n\n# A tibble: 6 × 4\n# Groups:   TeamFull, Game [6]\n  TeamFull             Game Opponent      `ryds/att`\n  &lt;chr&gt;               &lt;int&gt; &lt;chr&gt;              &lt;dbl&gt;\n1 Ohio State Buckeyes     3 Marshall            9.03\n2 Purdue Boilermakers     3 Oregon State        8.77\n3 Purdue Boilermakers     1 Indiana State       8   \n4 USC Trojans             6 Penn State          7.88\n5 Oregon Ducks            3 Oregon State        7.5 \n6 Purdue Boilermakers     6 Illinois            7.47\n\n\n\n\nCode\nbigten24 |&gt; summarize(\n  att = sum(RushingAtt),\n  yds = sum(RushingYds),\n  ypa = yds/att\n)\n\n\n   att   yds      ypa\n1 5288 23612 4.465204\n\n\n\n\nCode\nbtrush &lt;- btrush |&gt; mutate(gametick = as.character(Game))\n\n\n\n\nCode\nlibrary(ggplot2)\nggplot() + \n  geom_hline(yintercept = 4.465204, color = \"blue\") +\n  geom_line(data=btrush, aes(x=`gametick`, y=`ryds/att`, group=TeamFull)) + \n  facet_wrap(~TeamFull) + \n  labs(\n    title=\"The Terps Are Under Water on the Ground\",\n    subtitle = \"UMD is below the Big Ten average in rush yds per attempt in all but two games in 2024.\")\n\n\n\n\n\n\n\n\n\nIf you have watched Terps football game this season, you’ve seen the struggles that we have running the football. We can clearly see more of this in the above chart. Using RushYds/Attempt as a measure, we have been consistently below the conference average (blue line) throughout the year. As a fan myself, I just wonder what the problem is. This is one of the many reasons that we are amongst the bottom tier of teams in the Big Ten. Are defenses improving, or have we just not been able to figure this out?\nLet’s first just do a check of what happened last year.\n\n\nCode\nfootballlogs23 &lt;- read.csv(\"https://www.thescoop.org/sports-data-files/footballlogs23.csv\")\n\n\n\n\nCode\nbigten23 &lt;- footballlogs23 |&gt; filter(Conference == \"Big Ten Conference\")\n\n\nbtrush23 &lt;- bigten23 |&gt; group_by(TeamFull,Game, Opponent) |&gt; summarize(\n  `ryds/att` = sum(RushingYds)/sum(RushingAtt)\n)|&gt;\n  arrange(desc(`ryds/att`))\n\n\n`summarise()` has grouped output by 'TeamFull', 'Game'. You can override using\nthe `.groups` argument.\n\n\nCode\nhead(btrush23)\n\n\n# A tibble: 6 × 4\n# Groups:   TeamFull, Game [6]\n  TeamFull                  Game Opponent       `ryds/att`\n  &lt;chr&gt;                    &lt;int&gt; &lt;chr&gt;               &lt;dbl&gt;\n1 Purdue Boilermakers         10 Minnesota            8.02\n2 Michigan Wolverines         15 Washington*          7.97\n3 Wisconsin Badgers            1 Buffalo              7.85\n4 Rutgers Scarlet Knights      3 Virginia Tech        7.53\n5 Penn State Nittany Lions    12 Michigan State       7.26\n6 Maryland Terrapins           2 Charlotte            7.15\n\n\n\n\nCode\nbigten23 |&gt; summarize(\n  att = sum(RushingAtt),\n  yds = sum(RushingYds),\n  ypa = yds/att\n)\n\n\n   att   yds      ypa\n1 6449 25618 3.972399\n\n\n\n\nCode\nlibrary(ggplot2)\nggplot() + \n  geom_hline(yintercept = 3.972399, color = \"blue\") +\n  geom_line(data=btrush23, aes(x=`Game`, y=`ryds/att`, group=TeamFull)) + \n  facet_wrap(~TeamFull) + \n  labs(\n    title=\"This Isn't Our First Time With an Issue of Running\",\n    subtitle = \"In 2023, Maryland also was well below the Big Ten average rush yards per attempt.\")\n\n\n\n\n\n\n\n\n\nSo, this isn’t our first rodeo. I pretty much excuse those first few games anyway because they are the “buy” games against mediocre teams who we fill our schedule with. In the heat of the season against our Big Ten opponents, we haven’t performed - in both 2023 and 2024. If you’re curious about that huge dip in 2023, it was against Penn State where we had -49 rushing yards.\n\n\nCode\nmdrush &lt;- bigten24 |&gt; filter(TeamFull == \"Maryland Terrapins\")\nhead(mdrush)\n\n\n  Game       Date HomeAway       Opponent    Result PassingCmp PassingAtt\n1    1 2024-08-31             Connecticut  W (50-7)         27         37\n2    2 2024-09-07          Michigan State L (24-27)         26         34\n3    3 2024-09-14        @       Virginia W (27-13)         28         43\n4    4 2024-09-21               Villanova W (38-20)         29         34\n5    5 2024-09-28        @        Indiana L (28-42)         26         41\n6    6 2024-10-11            Northwestern L (10-37)         28         52\n  PassingPct PassingYds PassingTD RushingAtt RushingYds RushingAvg RushingTD\n1       73.0        381         3         46        248        5.4         3\n2       76.5        253         2         31         86        2.8         1\n3       65.1        263         2         37        128        3.5         1\n4       85.3        338         2         30        159        5.3         3\n5       63.4        289         3         30        112        3.7         1\n6       53.8        296         0         33         59        1.8         1\n  OffensivePlays OffensiveYards OffenseAvg FirstDownPass FirstDownRush\n1             83            629        7.6            15            12\n2             65            339        5.2            12             6\n3             80            391        4.9            10            11\n4             64            497        7.8            19             6\n5             71            401        5.6            12             5\n6             85            355        4.2            17             6\n  FirstDownPen FirstDownTotal Penalties PenaltyYds Fumbles Interceptions\n1            2             29         5         45       0             0\n2            3             21         9         80       0             1\n3            0             21         8         66       0             0\n4            0             25         8         89       1             1\n5            2             19        10         93       0             0\n6            2             25         3         30       3             1\n  TotalTurnovers           TeamFull                         TeamURL Outcome\n1              0 Maryland Terrapins /cfb/schools/maryland/2024.html       W\n2              1 Maryland Terrapins /cfb/schools/maryland/2024.html       L\n3              0 Maryland Terrapins /cfb/schools/maryland/2024.html       W\n4              2 Maryland Terrapins /cfb/schools/maryland/2024.html       W\n5              0 Maryland Terrapins /cfb/schools/maryland/2024.html       L\n6              4 Maryland Terrapins /cfb/schools/maryland/2024.html       L\n  TeamScore OpponentScore DefPassingCmp DefPassingAtt DefPassingPct\n1        50             7            14            33          42.4\n2        24            27            24            38          63.2\n3        27            13            21            37          56.8\n4        38            20            16            33          48.5\n5        28            42            22            33          66.7\n6        10            37            10            18          55.6\n  DefPassingYds DefPassingTD DefRushingAtt DefRushingYds DefRushingAvg\n1           222            1            30            88           2.9\n2           363            3            31           121           3.9\n3           247            0            30           123           4.1\n4           156            1            32            75           2.3\n5           359            3            42           151           3.6\n6           203            0            34            80           2.4\n  DefRushingTD DefPlays DefYards DefAvg DefFirstDownPass DefFirstDownRush\n1            0       63      310    4.9                7                3\n2            0       69      484    7.0               13                9\n3            1       67      370    5.5                8                8\n4            1       65      231    3.6                7                8\n5            3       75      510    6.8               17               10\n6            3       52      283    5.4                4                6\n  DefFirstDownPen DefFirstDownTotal DefPenalties DefPenaltyYds DefFumbles\n1               1                11            5            42          1\n2               4                26           10           100          1\n3               2                18            2            14          2\n4               5                20            3            15          0\n5               1                28            4            38          2\n6               0                10            7            54          0\n  DefInterceptions DefTotalTurnovers     Team         Conference\n1                2                 3 Maryland Big Ten Conference\n2                2                 3 Maryland Big Ten Conference\n3                2                 4 Maryland Big Ten Conference\n4                0                 0 Maryland Big Ten Conference\n5                2                 4 Maryland Big Ten Conference\n6                0                 0 Maryland Big Ten Conference\n\n\nLet’s look at the other teams that we have struggled against this year. I want to take a look at their defenses and see if maybe we are just facing some tough teams and the Big Ten is getting better. Let’s see each team we’ve played this year and our rushing against them.\n\n\nCode\nmdrush |&gt; group_by(Opponent) |&gt; summarize(\n  `ryds/att` = sum(RushingYds)/sum(RushingAtt)\n)|&gt;\n  arrange(`ryds/att`)\n\n\n# A tibble: 8 × 2\n  Opponent            `ryds/att`\n  &lt;chr&gt;                    &lt;dbl&gt;\n1 Northwestern              1.79\n2 Southern California       2.33\n3 Michigan State            2.77\n4 Virginia                  3.46\n5 Indiana                   3.73\n6 Minnesota                 4   \n7 Villanova                 5.3 \n8 Connecticut               5.39\n\n\nNorthwestern, USC, and MSU are the teams we struggled most against. At first look, I’m very dissapointed - these are three below .500 teams.\nNow, let’s compare how Maryland has played each specific opponent this season. I’ll create a dumbbell chart comparing the opponents allowed rushing YPA, and our actual rushing YPA against them to see who we have over/underperformed against. I expect a good amount of underperformances.\n\n\nCode\nbigten24 |&gt; group_by(TeamFull) |&gt; summarize(\n  `Rush YPA allowed` = mean(DefRushingAvg)\n) |&gt;\narrange(`Rush YPA allowed`)\n\n\n# A tibble: 18 × 2\n   TeamFull                 `Rush YPA allowed`\n   &lt;chr&gt;                                 &lt;dbl&gt;\n 1 Indiana Hoosiers                       2.57\n 2 Ohio State Buckeyes                    2.98\n 3 Nebraska Cornhuskers                   3.12\n 4 Northwestern Wildcats                  3.16\n 5 UCLA Bruins                            3.26\n 6 Maryland Terrapins                     3.35\n 7 Michigan Wolverines                    3.36\n 8 Iowa Hawkeyes                          3.4 \n 9 Penn State Nittany Lions               3.53\n10 Minnesota Golden Gophers               3.6 \n11 Michigan State Spartans                3.8 \n12 Oregon Ducks                           3.86\n13 USC Trojans                            4.06\n14 Washington Huskies                     4.28\n15 Illinois Fighting Illini               4.42\n16 Wisconsin Badgers                      4.6 \n17 Purdue Boilermakers                    4.94\n18 Rutgers Scarlet Knights                5.25\n\n\n\n\nCode\nuconndef &lt;- footballlogs24 |&gt; filter(TeamFull == \"Connecticut Huskies\") |&gt; summarize(\n  rushypa = mean(DefRushingAvg))\nuvadef &lt;- footballlogs24 |&gt; filter(TeamFull == \"Virginia Cavaliers\") |&gt; summarize(\n  rushypa = mean(DefRushingAvg))\n\n\n\n\nCode\nmaryland_rush_diff &lt;- data.frame(Opponent = c(\"UConn\", \"Mich. State\", \"Virginia\", \"Villanova\", \"Indiana\", \"Northwestern\", \"USC\", \"Minnesota\"), Maryland_Rush_YPA = c(5.4, 2.8, 3.5, 5.3, 3.7, 1.8, 2.3, 4.0), Opponent_YPA_Allowed = c(3.811,3.80,3.8375,4.1,2.56,3.15,4.05,3.6))\n\n\n\n\nCode\nlibrary(ggplot2)\nlibrary(ggalt)\n\n\nRegistered S3 methods overwritten by 'ggalt':\n  method                  from   \n  grid.draw.absoluteGrob  ggplot2\n  grobHeight.absoluteGrob ggplot2\n  grobWidth.absoluteGrob  ggplot2\n  grobX.absoluteGrob      ggplot2\n  grobY.absoluteGrob      ggplot2\n\n\nCode\nggplot() +\n  geom_dumbbell(data=maryland_rush_diff, \n    aes(y=Opponent, x=Maryland_Rush_YPA, xend=Opponent_YPA_Allowed),\n    size = 1,\n    color = \"grey\",\n    colour_x = \"red\",\n    colour_xend = \"yellow\") + \n  labs(title = \"Maryland Football Has Underperformed Rushing in Half of Their Games\", subtitle =  \"The Terps show some inconsistency running the ball overall.\", x = \"Maryland's Rush YPA by Game (Red) vs. Opponents Season Rush YPA Allowed (Yellow)\") +\n  theme_minimal()\n\n\nWarning: Using the `size` aesthetic with geom_segment was deprecated in ggplot2 3.4.0.\nℹ Please use the `linewidth` aesthetic instead.\n\n\n\n\n\n\n\n\n\nThis surprises me a bit. As I mentioned, we underperformed severely against three low-ranked Big Ten teams. What stands out to me is that we actually overperformed against Indiana’s top ranked defense. To summarize what I see: inconsistency.\nIt really doesn’t matter who we play - you can’t really predict how well we are going to run the ball. I think this is an even worse thing for the Terps. Having no pattern in how our run game has performed means that it is harder to find a solution. I really wish we only played like crap against good opponents, because then you could point at it and say that we’re just getting locked up by great teams. Having bad days against conference bottomfeeders is unacceptable, and tells me that we have no sense of direction with pounding the rock.\nWhile Billy Edwards has been throwing the ball decently, a balanced attack is key to winning games - I can’t even imagine the field day that our QB would have if there was any threat of a play action. I’ve been playing decent enough in my intramural flag football league - maybe I’ll try out at RB next year."
  },
  {
    "objectID": "posts/vb-aces/index.html",
    "href": "posts/vb-aces/index.html",
    "title": "Maryland VB’s Failed Ace Attack in 2023, and the Player Who Turned it Around",
    "section": "",
    "text": "Code\nsuppressPackageStartupMessages(library(tidyverse))\n\nvbdata23 &lt;- read.csv(\"https://raw.githubusercontent.com/dwillis/NCAAWomensVolleyballData/main/data/ncaa_womens_volleyball_playerstats_2023.csv\")\n\n\n\n\nCode\n#Analyzing volleyball data, with players who played more than 20 games. We want to first figure out who were the leaders in aces.\nplayers &lt;- vbdata23 |&gt; filter(gp &gt;= 20) |&gt; drop_na(\"aces\", \"pos\")\nsummary(players$aces)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    3.00   14.00   15.49   25.00   73.00 \n\n\n\n\nCode\n#Now that we have aces, let's look at the leaders in the country in aces per match (apm) and highlight Maryland players. \nplayers &lt;- players |&gt; filter(aces &gt;= 25)\n\nacesdata &lt;- players |&gt; group_by(full_name, pos, team) |&gt; summarize(\n  aces = sum(aces),\n  matches = gp,\n  apm = aces/matches) |&gt; \n  arrange(desc(apm))\n\numdaces &lt;- acesdata |&gt; filter(team == \"Maryland Terrapins, Terps\")\n\nlibrary(janitor)\nlibrary(ggbeeswarm)\nlibrary(ggrepel)\n\nset.seed(1234)\n\nggplot() + \n  geom_beeswarm(data=acesdata, groupOnX=TRUE, aes(x=pos, y=apm), color=\"grey\") +\n  geom_beeswarm(data=umdaces, groupOnX=TRUE, aes(x=pos, y=apm), color=\"red\") +\n  geom_text_repel(\n    data=umdaces, \n    aes(x=pos, y=apm, label=full_name)) +\n  labs(title=\"The Terps Clearly Had a Serving Problem Last Year\", subtitle=\"Maryland's leaders were mediocre in terms of aces per match compared to the NCAA's top servers.\", caption=\"By Sam Benning\")  + theme_minimal()\n\n\n\n\n\n\n\n\n\nThis year, Maryland’s volleyball team is top 10 in all of the NCAA in aces per set. Their aces often keep them afloat and score lots of points for them. It may not lead to our ideal record (10-9), but it certainly has been our strongest statistic. This hasn’t been a strong suit of ours in the past, though; we can use aces per match to look deeper into this. When looking at data from the 2023 season, we can see a drastic difference. In the above beeswarm chart, the top quartile of 2023 NCAA volleyball players in terms of total aces were measured. We only had three players who had &gt;25 aces on the season, and those who did were swarmed by mediocrity - all sat in or below the middle of the pack in terms of aces per match.\nAgain, 2024 has been a completely different story. It is clear that the coaching staff found something to turn this stat around. Specifically, they have found one player to lead the charge. RH Sam Schnitta has 57 aces in 19 games/69 sets. She leads the nation in aces per set (0.83). She is essentially the sole reason why we look so good on paper. Funnily enough, Schnitta was on the team last year, but was not nearly close to a top 3 server on the team. The senior has figured out her prime role, however no other Terps have really shown up in this matter. Our next leader in this aces comes in at a measly 18. Our depth clearly is hurting us.\nHopefully Schnitta can spread the magic touch to improve the Terps’ offensive attack. Until then, mediocrity will likely be the name of the game."
  },
  {
    "objectID": "posts/ maryland-oregon-vb-pts/index.html",
    "href": "posts/ maryland-oregon-vb-pts/index.html",
    "title": "Same Pond, Different Animals: The Terps are Actually Outplaying the Ducks This Year",
    "section": "",
    "text": "We don’t need to be scared just yet, Terps fans. While our beloved volleyball team has had a strong overall record (10-5), they sit at 1-3 against Big Ten opponents so far. On the other hand, new conference addition Oregon Ducks (12-2) boast a 3-1 conference record and sit in the top three in the Big Ten rankings. However, the numbers will show us that the Terps may actually be as good, or better, than their semi-aquatic competitor. In this post, we will compare point scoring data for the Terps and fellow Big Ten member Oregon Ducks to figure out who will rule the waters.\nFirst, we can load in statistics from online to RStudio. This contains all game logs and stats from each NCAA volleyball match this year. We will also use some pre-made coding libraries to help us analyze/summarize the data and create some charts.\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(ggplot2)\nlibrary(waffle)\n\n\n\n\nCode\nvb24 &lt;- read_csv(\"https://raw.githubusercontent.com/dwillis/NCAAWomensVolleyballData/main/data/ncaa_womens_volleyball_matchstats_2024.csv\")\n\n\nRows: 5235 Columns: 39\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (4): team, opponent, home_away, result\ndbl  (34): ncaa_id, team_score, opponent_score, s, kills, errors, total_atta...\ndate  (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nNow let’s take a look at all of Maryland’s games from this season, in and out of conference. We will obtain the totals for each stat that goes into points for the Terps.\n\n\nCode\nmdtotals &lt;- vb24 |&gt; filter(team == \"Maryland\") |&gt;\n  summarise(\n    kills = sum(kills),\n    blocks = sum(block_solos + block_assists),\n    aces = sum(aces),\n    opperrors = sum(defensive_errors)\n  )\n\nprint(mdtotals)\n\n\n# A tibble: 1 × 4\n  kills blocks  aces opperrors\n  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;\n1   714    253   127       323\n\n\nUsing these above numbers, we can create a vector that we can use for analysis.\n\n\nCode\nmd &lt;- c(\"Kills\" = 714, \"Blocks\" = 253, \"Aces\" = 127, \"Opponent Errors\" = 323)\n\n\nWe can create a waffle chart using this vector that will display the distribution of where Maryland’s points are coming from. This will be on a scale that is readable, thus why we divide the data in the vector by 5, making 1 square equal to 5 points scored for a given stat.\n\n\nCode\nwaffle(md/5,\n       rows = 10,\n       title = \"The Terps Make Their Money off of Kills and Aces\",\n       colors = c(\"red\",\"yellow\", \"black\", \"grey\"),\n       xlab = \"1 square = 5 points\"\n)\n\n\n\n\n\n\n\n\n\nFrom the waffle chart data, we can see that the Terps are hungry for kills and aces. more than half of their points come from these two. It may look like aces aren’t a huge factor, but that is quite a high number compared to other teams (see Oregon below). The other two stats are relatively evenly distributed, with some weight coming from their opponents screwing up - likely a product of some lower level teams that they played before conference play.\nWe will next go through the same process to obtain data for Oregon.\n\n\nCode\noretotals &lt;- vb24 |&gt; filter(team == \"Oregon\") |&gt;\n  summarise(\n    kills = sum(kills),\n    blocks = sum(block_solos + block_assists),\n    aces = sum(aces),\n    opperrors = sum(defensive_errors)\n  )\n\nprint(oretotals)\n\n\n# A tibble: 1 × 4\n  kills blocks  aces opperrors\n  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;\n1   636    269    72       299\n\n\nOne important piece to note is that Oregon has scored 223 less points than Maryland this year (derived from summing up their respective totals). This difference is accounted for as an extra column in the vector being made for Oregon, so that their chart is on the same scale as Maryland:\n\n\nCode\nore &lt;- c(\"Kills\" = 595, \"Blocks\" = 252, \"Aces\" = 69, \"Opponent Errors\" = 278, 223)\n\n\nNow, we can load in the data using our favorite food-based chart, with the color “white” adding in blank space to account for the difference so the charts look the same.\n\n\nCode\nwaffle(ore/5,\n       rows = 10,\n       title = \"Only a Sliver of Aces for the Ducks\",\n       colors = c(\"green\",\"yellow\", \"black\", \"grey\", \"white\"),\n       xlab = \"1 square = 5 points\"\n)\n\n\n\n\n\n\n\n\n\nLook at that small slice that takes up aces! The Ducks have not been scoring much from their serving - the Terps appear to have doubled them in this stat. The other proportions show to be relatively even, but the Ducks have not kept up with the Terps this year when it comes to their offensive attack.\nAs mentioned, this is from all of the season. Oregon has done quite well this year in-conference, and Maryland quite the opposite. So, let’s see if these trends hold true in conference play:\nWe will make the same summary and vectors for each team, but will filter for games against Big Ten opponents, which have been their last four games (after September 22nd).\n\n\nCode\nmdconftotals &lt;- vb24 |&gt; filter(team == \"Maryland\", date&gt;\"2024-09-22\") |&gt;\n  summarise(\n    kills = sum(kills),\n    blocks = sum(block_solos + block_assists),\n    aces = sum(aces),\n    opperrors = sum(defensive_errors)\n  )\nprint(mdconftotals)\n\n\n# A tibble: 1 × 4\n  kills blocks  aces opperrors\n  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;\n1   202     71    38        85\n\n\n\n\nCode\nmdconf &lt;- c(\"Kills\" = 202, \"Blocks\" = 71, \"Aces\" = 38, \"Opponent Errors\" = 85)\n\n\nSince there are less games for just conference play, we can make our scale different so that visually the waffle charts look similar for this data. Now, each square is only worth 2 points (as we divided the vector by 2), but we can still see the distribution and weights of each stat.\n\n\nCode\nwaffle(mdconf/2,\n       rows = 8,\n       title = \"Terps Still Dominating the Attack in Big Ten\",\n       colors = c(\"red\",\"yellow\", \"black\", \"grey\"),\n       xlab = \"1 square = 2 points\"\n)\n\n\n\n\n\n\n\n\n\nWell, it looks like Maryland holds pretty much the same standards for itself in Big Ten matchups. Those aces are doing a good amount of damage. I was clearly wrong in my analysis of opponent errors as well - Power Five teams still make errors, too. Let’s see how Oregon compares.\n\n\nCode\noreconftotals &lt;- vb24 |&gt; filter(team == \"Oregon\", date&gt;\"2024-09-22\") |&gt;\n  summarise(\n    kills = sum(kills),\n    blocks = sum(block_solos + block_assists),\n    aces = sum(aces),\n    opperrors = sum(defensive_errors)\n  )\nprint(oreconftotals)\n\n\n# A tibble: 1 × 4\n  kills blocks  aces opperrors\n  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;\n1   215     84    23        96\n\n\n\n\nCode\noreconf &lt;- c(\"Kills\" = 174, \"Blocks\" = 67, \"Aces\" = 20, \"Opponent Errors\" = 75, 60)\n\n\nThrough 4 games, Maryland has also scored 63 more points than Oregon in Big Ten play. We account for that again.\n\n\nCode\nwaffle(oreconf/2,\n       rows = 8,\n       title = \"Ducks Still Aren't Serving up Aces In-Conference\",\n       colors = c(\"green\",\"yellow\", \"black\", \"grey\", \"white\"),\n       xlab = \"1 square = 2 points\"\n)\n\n\n\n\n\n\n\n\n\nThose Aces really aren’t helping them out much either. As we see, Maryland is again nearly doubling Oregon in this number. Yet, Oregon has a better record and have built some momentum moving forward. The Terps maintain a high-powered attack but there is something in between the lines that we would need to learn more about to figure out why they don’t have as good of a record as we may expect. Nevertheless, there is much hope for this Maryland team, as these numbers show that there is great potential.\nWhen looking closer into their records over the course of the season, Oregon has played 10 fewer sets than Maryland. They have either blown teams out, or have been blown out, with only 4 of their games going more than 3 sets. Maryland has hung in there with some big-time opponents, taking a set off of #3 Penn State. Otherwise, they are consistently average to above average; they have a tough time finishing (mediocre) teams off. If Maryland can find balance in the rest of its attack, there’s a high ceiling to make some magic happen. Oregon, while relatively up and down, has found themselves ranked amongst the best teams in the country. So, is consistency key for the Terps, or will the boom/bust system keep the Ducks rolling? It’ll be interesting to see which holds better over the rest of the season."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/umd-mbb-early-season/index.html",
    "href": "posts/umd-mbb-early-season/index.html",
    "title": "Are We Gonna Be Good? Looking Into Maryland Men’s Basketball Early Data",
    "section": "",
    "text": "After a great first win for the team, it’s still extremely tough for us to figure out how well our Maryland men’s basketball team is doing early on in the season. In this blog, we will look into some potential statistics that help us figure out if our team looks good early on, given a limited number of observations. We will use all college basketball game data from 2015 to today.\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(ggplot2)\nlibrary(ggrepel)\n\n\n\n\nCode\nbball &lt;- read.csv(\"https://raw.githubusercontent.com/dwillis/dwillis.github.io/main/docs/sports-data-files/cbblogs1525.csv\")\n\n\n\n\nCode\numdbb &lt;- bball |&gt; filter(Team == \"Maryland\") \nmdearly &lt;- umdbb |&gt; filter(Game &lt; 7)\n\n\nWhen eyeballing the data and using my logic, I decided to use the first 6 games of each season as our definition of “early season,” or the range where we don’t really feel confident in how well a team is doing, especially since Maryland is usually playing some poor opponents during this time. In this land of uncertainty, we want to find something that we can use to see how well the team is actually doing.\nI will add differential as a variable because that’s a pretty good measure of how well we are doing. We’re usually expected to win these early season games.\n\n\nCode\nmdearly &lt;- mdearly |&gt;\n  mutate(\n    differential = TeamScore-OpponentScore\n  )\n\n\nTo compare how we’ve done, we can use a measure of a statistic that basketballreference gives us, called Opponent SRS (Simple Rating System). It essentially rates a team’s overall ranking based upon their season-long point differential and their strength of schedule. 0 is an average overall team. It accounts for if Maryland was playing good or bad teams early on in their season.\n\n\nCode\nmdearly |&gt;\n  summarize(\n    avgpd = mean(differential)\n  )\n\n\n     avgpd\n1 14.61818\n\n\n\n\nCode\nggplot() +\n  geom_point(data=mdearly, aes(x=OpponentSRS, y=differential)) +\n  facet_wrap(~Season) +\n  geom_vline(xintercept = 0) +\n  geom_hline(yintercept = 14.61818)\n\n\nWarning: Removed 3 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nThe main quadrant of success is the top left - blowing out teams that suck (by &gt;14 points). The bottom left is bad - not doing great against bad teams. The top right is immensely good, but that is clearly more rare for us - beating good teams by a lot. The worst place to be is the bottom left, which I think we are found in a little bit more than we should be…we seem to not blow out a decent number of worse teams.\nBut, this is only good in hindsight. It needs full season data to properly show. The more games a team plays, the more accurate their SRS is.\nInstead, I believe that we can use other statistics to determine how well we are playing. As valuable as scoring and other statistics are, I think they shouldn’t be the first things we look to as teams get their footing. I want to see if teams are disciplined and stick together. Hence, limiting turnovers and getting assists are the things that I’d look at in a team.\nI want to see what percentage of a team’s baskets are assists as a ratio, and then will use the turnover percentage stat which essentially measures how many turnovers a team has per 100 possessions.\n\n\nCode\nmdearly &lt;- mdearly |&gt; mutate(\n  astpct = 100 * TeamAssists/TeamFG,\n  tovpct = (100 * TeamTurnovers)/ (TeamFGA + 0.44*TeamFTA + TeamTurnovers)\n)\n\n\nNow we can analyze how disciplined we are as a team and how cohesive our units are. This will be visualized through a bubble chart.\n\n\nCode\n#just so we can organize the bubble chart into quadrants (these numbers will be the dividers)\nmdearly |&gt; summarize(\n  avgast = mean(astpct),\n  avgtov = mean(tovpct)\n)\n\n\n    avgast   avgtov\n1 51.19652 15.96991\n\n\n\n\nCode\nggplot() + \n  geom_point(\n    data=mdearly, \n    aes(x=astpct, y=tovpct, size=differential), \n    color=\"red\", \n    alpha=.5) +\n  geom_hline(yintercept = 15.96991) +\n  geom_vline(xintercept = 51.19652) +\n  labs(title = \"Does Sharing the Rock Early Give Us a Shot at Success?\", subtitle = \"If the Terps can't properly pass the ball, they don't usually do well.\") +\n  facet_wrap(~Season)\n\n\n\n\n\n\n\n\n\nWe again can see four quadrants divided by the average assist percentage ans average turnover percentage. In this plot, the bottom right is good, with high assist pct and low turnover pct. I added in the bubbles just to show how well our team was playing given these stats. It’s important to note that we have plenty of games where our team was turning the ball over or not sharing the ball and we still had big wins (big bubbles), but, as I mentioned, these are mostly mediocre teams that we are playing during these first few games. We’re expected to win. I would want at least one of these statistics to be better than average to feel good about our squad’s ability to play. Looking at our sub-20 win seasons (2017/18, 2020/21, 2021/22, 2023/24), I see at least some inconsistency in our ability to share the rock and not turn it over. Or, when we do share the rock, we also turn it over, too. We are mostly in the extremes of the data for a few games (either high up or far left on the chart). I look at that 2021-22 season as a bit of an outlier, because early on, our team was projected to be solid, but we underperformed for various reasons. I can see why we were ranked early in the season because we clearly were playing pretty disciplined.\nLooking further at this data and knowing how well our teams peformed in each regular season, I would say that there is less correlation than I assumed between our regular season winning and these two stats. However, I do believe that there is a reflection that we are not an elite team here. We don’t see our team in that bottom right quadrant a lot, meaning that we haven’t had those ideally-bonded teams. Thus, a reason that I believe we have never been able to make a true run if we make it to the tournament. I think it says something deeper about the culture of Maryland basketball - maybe a few solid players who like to make their success on their own, but not enough people bought into the system to make something greater happen."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\nBelow is a test image just to make sure this works.\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/big-ten-plays/index.html",
    "href": "posts/big-ten-plays/index.html",
    "title": "The NCAA Failed to Shift the Speed of CFB",
    "section": "",
    "text": "This is a post presenting the tempo of Big Ten Football teams from the 2023 and 2024 seasons. We will be exploring the number of plays called per game by each team to examine the clock stoppage rule changes across the NCAA.\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nfootballlogs23 &lt;- read_csv(\"~/Downloads/footballlogs23 (5).csv\")\n\n\nRows: 1702 Columns: 54\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con...\ndbl  (45): Game, PassingCmp, PassingAtt, PassingPct, PassingYds, PassingTD, ...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nfootballlogs24 &lt;- read_csv(\"~/Downloads/footballlogs24.csv\")\n\n\nRows: 704 Columns: 54\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con...\ndbl  (45): Game, PassingCmp, PassingAtt, PassingPct, PassingYds, PassingTD, ...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nCode\nbigten23 &lt;- footballlogs23 |&gt; filter(Conference==\"Big Ten Conference\")\n\nbigten24 &lt;- footballlogs24 |&gt; filter(Conference==\"Big Ten Conference\")\n\n\n\n\nCode\navgplays23 &lt;- bigten23 |&gt; group_by(TeamFull) |&gt;\n  summarise(\n  avgoffplays23 = mean(OffensivePlays)\n) |&gt;\narrange(desc(avgoffplays23))\n\n\n\n\nCode\navgplays23 |&gt;\nggplot() + \n  geom_bar(\n    data=avgplays23, \n    aes(x=reorder(TeamFull,avgoffplays23), weight=avgoffplays23)\n  ) +\n  labs(\n    title = \"Average Offensive Plays per Game, Big Ten 2023\",\n    y = \"Average Plays per Game\",\n    x = \"Team\"\n  ) +\n  coord_flip()\n\n\n\n\n\n\n\n\n\nLast year, we see a pretty average spread, with teams running somewhere between 60 and 70 plays. There isn’t much correlation with success and plays ran though, as Michigan stands at the bottom, OSU in the middle, and PSU at the top. Let’s check out this year’s data:\n\n\nCode\navgplays24 &lt;- bigten24 |&gt; group_by(TeamFull) |&gt;\n  summarise(\n  avgoffplays24 = mean(OffensivePlays)\n) |&gt;\narrange(desc(avgoffplays24))\n\n\n\n\nCode\navgplays24 |&gt;\nggplot() + \n  geom_bar(\n    data=avgplays24, \n    aes(x=reorder(TeamFull,avgoffplays24), weight=avgoffplays24)\n  ) +\n  labs(\n    title = \"Average Offensive Plays per Game, Big Ten 2024\",\n    y = \"Average Plays per Game\",\n    x = \"Team\"\n  ) +\n  coord_flip()\n\n\n\n\n\n\n\n\n\nSome side notes: Aside from the evaluation of the play clock, a few things stand out. When it comes down to good vs. great, maybe less is more - Michigan has ran many fewer plays over than a lot of its peers over the past two years. Penn State (who ran the most plays in 2023) are clearly trying to chase their rival up north and has moved down to the middle of the pack. It has certainly worked for them through the first half of the season. This can also be a product of great offense - the more you score, the less plays you run.\nIn terms of the rule change affecting this year’s style of play, the majority of the teams (excluding Purdue) generally held pretty consistent in terms of how many plays they have run year-over-year. When it comes to overall success, the new rule doesn’t have much effect either because we see that great teams can run many plays or few plays and still be successful (again, Michigan at the bottom, OSU/PSU in the middle, and now Oregon at the top). The NCAA can try to change the rules, but they can’t seem to change how its teams play."
  },
  {
    "objectID": "posts/bad-rushing-wins/index.html",
    "href": "posts/bad-rushing-wins/index.html",
    "title": "Defense Wins Championships, but Offense Loses Them, Too: Big Ten Football Championship 2023",
    "section": "",
    "text": "On paper, the Iowa Hawkeyes had quite a solid game against Michigan in the 2023 Big Championship Football game. Thanks to some stats, we found that the stats lied to us. Let’s check out some college football data.\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nfootballlogs&lt;-read.csv(\"https://dwillis.github.io/sports-data-files/footballlogs1124.csv\")\n\n\n\n\nCode\nfootballlogs |&gt; group_by(Season) |&gt; summarise(\n  Games = n()\n)\n\n\n# A tibble: 14 × 2\n   Season Games\n    &lt;int&gt; &lt;int&gt;\n 1   2011  1527\n 2   2012  1572\n 3   2013  1579\n 4   2014  1623\n 5   2015  1635\n 6   2016  1633\n 7   2017  1650\n 8   2018  1656\n 9   2019  1662\n10   2020  1100\n11   2021  1655\n12   2022  1672\n13   2023  1702\n14   2024   926\n\n\n\n\nCode\nwinlosslogs &lt;- footballlogs |&gt; mutate(\n  wins = case_when(\n    grepl(\"W\", Outcome) ~ 1,\n    grepl(\"L\", Outcome) ~ 0)\n)\n\n\nThe Michigan Wolverines came into the 2023 Big Ten Championship game looking to set themselves up for a potential CFP title. They had an elite backfield, averaging nearly 170 rushing YPG, which helped lead the charge to their undefeated record. However, they first had to get through the Iowa Hawkeyes, known for a suffocating defense that was bound to cause hell for one of the top teams in the country. A main focus of Iowa’s defense was surely to hinder the Michigan run game. By the end of the championsihp, Iowa did exactly what it set out to do. They did an outstanding job of stopping the run, holding the Wolverines to a total of 66 rushing yards.\nIowa lost 26-0.\nWhat happened? Surely Michigan passed the crap out of the ball.\n\n\nCode\nmichigan_pass_yds_iowa &lt;- winlosslogs |&gt; filter(TeamFull == \"Michigan Wolverines\", Date == \"2023-12-02\") |&gt; select(PassingYds)\n\nmichigan_pass_yds_iowa\n\n\n  PassingYds\n1        147\n\n\nNope. 147 passing yards.\nHow likely was this to even happen? We can check out every Michigan win and how well they ran the ball.\n\n\nCode\nlibrary(zoo)\n\n\n\nAttaching package: 'zoo'\n\n\nThe following objects are masked from 'package:base':\n\n    as.Date, as.Date.numeric\n\n\nCode\nmichigan_wins &lt;- winlosslogs |&gt; group_by(Date) |&gt; filter(TeamFull == \"Michigan Wolverines\", wins == 1, Season &gt;= 2015, Season &lt;= 2023) |&gt; summarize(RushYds = sum(RushingYds))\n\nmichigan_low_rush_wins &lt;- michigan_wins |&gt; filter(RushYds &lt; 100)\n\nmichigan_vs_iowa &lt;- michigan_wins |&gt; filter(Date == as.Date(\"2023-12-02\"))\n\n# Add a Season column (Thanks ChatGPT) - helps with the x labels\nmichigan_wins$Season &lt;- format(as.Date(michigan_wins$Date), \"%Y\")\nmichigan_low_rush_wins$Season &lt;- format(as.Date(michigan_low_rush_wins$Date), \"%Y\")\nmichigan_vs_iowa$Season &lt;- format(as.Date(michigan_vs_iowa$Date), \"%Y\")\n\n# Convert Date to a factor to remove gaps (Thanks ChatGPT)\nmichigan_wins$Date &lt;- as.factor(as.Date(michigan_wins$Date))\nmichigan_low_rush_wins$Date &lt;- as.factor(as.Date(michigan_low_rush_wins$Date))\nmichigan_vs_iowa$Date &lt;- as.factor(as.Date(michigan_vs_iowa$Date))\n\n#plot the stuff\nggplot() + \n  geom_bar(data = michigan_wins, aes(x = Date, y = RushYds, fill = \"&gt;100 RushYds\"), stat = \"identity\", alpha = 0.85) +\n  geom_bar(data = michigan_low_rush_wins, aes(x = Date, y = RushYds, fill = \"&lt;100 RushYds\"), stat = \"identity\") + \n  geom_bar(data = michigan_vs_iowa, aes(x = Date, y = RushYds, fill = \"Michigan vs Iowa\"), stat = \"identity\") +\n  scale_fill_manual(values = c(\"&gt;100 RushYds\" = \"blue\", \"&lt;100 RushYds\" = \"yellow\", \"Michigan vs Iowa\" = \"red\")) +  # Define colors for the bars\n  scale_x_discrete(labels = function(x) ifelse(duplicated(michigan_wins$Season), \"\", michigan_wins$Season)) +  # Custom x-axis labels by season\n  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +\n  labs(fill = \"Category\") + # Labels for the legend \nlabs(title=\"What an Improbable Run Michigan had Versus Iowa\", subtitle = \"Michigan's Rushing Yards in Every Game They Won During the Harbaugh Era\")\n\n\n\n\n\n\n\n\n\nAs we see, Michigan has very few wins when they run for less than 100 yards. Prior to this game during the Harbaugh era (2015-2023), it only happened three times. Iowa clearly had the right scheme in mind, but it seems like they just had an unlucky day.\nWhen we look deeper into the game, Iowa actually allowed two rushing touchdowns to Michigan’s star HB Blake Corum. A team doesn’t score 26 points by accident, especially to one of the best defenses in the country. Iowa’s halt of Michigan’s rushing yards is clearly not congruent with giving up as many points as they did. A reason for this? Not their defense. Iowa’s offense turned the ball over three times - all of them fumbles. These set up short and easy drives for Michigan to essentially walk into the endzone. On Michigan’s two touchdown-scoring drives, they ran a combined 3 plays for 11 yards. Yes, you read that right. They started with the ball inside the Iowa 10 yard line twice after recovering fumbles (source: ESPN). This helps explain Michigan’s “poor” offensive performance. In fact, they were pretty efficient in scoring while they had the time to. So, defense may win championships, but even a decent looking defense might come from better-than-mediocre offense. The statement only holds under certain conditions. Sorry Iowa."
  },
  {
    "objectID": "posts/umd-football-ypp/index.html",
    "href": "posts/umd-football-ypp/index.html",
    "title": "Not Elite, But Not Too Bad - Comparing UMD CFB Recent Seasons",
    "section": "",
    "text": "While we as Terps fans may be generally displeased with our play comparative to the other Big Ten starring teams, we are actually in a much better place than we were through the 2010’s. The stats will back this up.\nIn this blog post, we are going to look through college football game logs to gain information on how Maryland football’s performance has measured each season since 2011. We will mainly be using bubble charts to look at this data and compare seasons. The bubble chart is similar to a scatterplot, as it contains points on an x,y graph, but it includes a z variable which is related to the other variables. The z variable is represented through the size of the point on the graph (aka the bubble).\nLet’s first load in our college football data.\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\ncfootball &lt;- read.csv(\"https://thescoop.org/sports-data-files/footballlogs1124.csv\")\nhead(cfootball)\n\n\n  Game       Date HomeAway  Opponent    Result PassingCmp PassingAtt PassingPct\n1    1 2011-09-03     &lt;NA&gt; Louisiana W (61-34)         28         43       65.1\n2    2 2011-09-08     &lt;NA&gt;   Arizona W (37-14)         42         53       79.2\n3    3 2011-09-17        @     Tulsa W (59-33)         29         40       72.5\n4    4 2011-09-24        @ Texas A&M W (30-29)         47         60       78.3\n5    5 2011-10-08     &lt;NA&gt;    Kansas W (70-28)         38         49       77.6\n6    6 2011-10-15        @     Texas W (38-26)         23         41       56.1\n  PassingYds PassingTD RushingAtt RushingYds RushingAvg RushingTD\n1        458         4         44        208        4.7         3\n2        397         2         31        197        6.4         3\n3        369         3         48        174        3.6         4\n4        438         2         35         46        1.3         1\n5        494         7         27        106        3.9         3\n6        218         1         27        202        7.5         3\n  OffensivePlays OffensiveYards OffenseAvg FirstDownPass FirstDownRush\n1             87            666        7.7            21            10\n2             84            594        7.1            17             8\n3             88            543        6.2            18            13\n4             95            484        5.1            22             8\n5             76            600        7.9            19             6\n6             68            420        6.2            12             8\n  FirstDownPen FirstDownTotal Penalties PenaltyYds Fumbles Interceptions\n1            0             31         7         80       0             3\n2            0             25        10         90       0             1\n3            1             32         5         50       0             2\n4            3             33        11         95       1             0\n5            2             27         5         35       0             0\n6            1             21         2         20       1             0\n  TotalTurnovers               TeamFull                               TeamURL\n1              3 Oklahoma State Cowboys /cfb/schools/oklahoma-state/2011.html\n2              1 Oklahoma State Cowboys /cfb/schools/oklahoma-state/2011.html\n3              2 Oklahoma State Cowboys /cfb/schools/oklahoma-state/2011.html\n4              1 Oklahoma State Cowboys /cfb/schools/oklahoma-state/2011.html\n5              0 Oklahoma State Cowboys /cfb/schools/oklahoma-state/2011.html\n6              1 Oklahoma State Cowboys /cfb/schools/oklahoma-state/2011.html\n  Outcome TeamScore OpponentScore DefPassingCmp DefPassingAtt DefPassingPct\n1       W        61            34            20            37          54.1\n2       W        37            14            37            51          72.5\n3       W        59            33             8            26          30.8\n4       W        30            29            28            47          59.6\n5       W        70            28            26            37          70.3\n6       W        38            26            22            40          55.0\n  DefPassingYds DefPassingTD DefRushingAtt DefRushingYds DefRushingAvg\n1           212            0            37           108           2.9\n2           398            1            21            41           2.0\n3           117            2            59           365           6.2\n4           309            2            27           162           6.0\n5           325            2            44           153           3.5\n6           139            0            49           231           4.7\n  DefRushingTD DefPlays DefYards DefAvg DefFirstDownPass DefFirstDownRush\n1            2       74      320    4.3               10                6\n2            1       72      439    6.1               19                2\n3            2       85      482    5.7                5               21\n4            1       74      471    6.4               17                7\n5            2       81      478    5.9               15                9\n6            2       89      370    4.2                9               14\n  DefFirstDownPen DefFirstDownTotal DefPenalties DefPenaltyYds DefFumbles\n1               3                19            7            42          1\n2               0                21           11            67          1\n3               1                27            3            25          2\n4               1                25           10            82          1\n5               0                24            5            25          2\n6               1                24            3            30          1\n  DefInterceptions DefTotalTurnovers           Team        Conference Season\n1                1                 2 Oklahoma State Big 12 Conference   2011\n2                0                 1 Oklahoma State Big 12 Conference   2011\n3                4                 6 Oklahoma State Big 12 Conference   2011\n4                3                 4 Oklahoma State Big 12 Conference   2011\n5                2                 4 Oklahoma State Big 12 Conference   2011\n6                2                 3 Oklahoma State Big 12 Conference   2011\n\n\nNow, we can mutate the data to add a binary variable called wins which is 1 if a team won a game, and 0 if they lost.\n\n\nCode\nmarylandfb &lt;- cfootball |&gt; filter(TeamFull == \"Maryland Terrapins\")\nwin_loss &lt;- marylandfb |&gt; \n  mutate(\n    wins = case_when(\n      grepl(\"W\", Outcome) ~ 1, \n      grepl(\"L\", Outcome) ~ 0)\n)\n\n\nWe will be measuring Maryland’s performance based upon their yards per play (YPP) both offensively and defensively. We can extract this data from our current dataset.\n\n\nCode\nwin_loss |&gt; group_by(Season) |&gt; summarise(\n    TotalPlays = sum(OffensivePlays), \n    TotalYards = sum(OffensiveYards), \n    DefensivePlays = sum(DefPlays), \n    DefensiveYards = sum(DefYards), \n    TotalWins = sum(wins)) |&gt; \n  mutate(\n    OffensiveYPP = TotalYards/TotalPlays, \n    DefensiveYPP = DefensiveYards/DefensivePlays) -&gt; ypp\n\n\n\n\nCode\nlibrary(ggrepel)\n\n\nNow we can look at just the overall offensive/defensive average YPP since 2011.\n\n\nCode\nypp |&gt; \n  ungroup() |&gt; \n  summarise(\n    offensemean = mean(OffensiveYPP), \n    defensemean = mean(DefensiveYPP)\n    )\n\n\n# A tibble: 1 × 2\n  offensemean defensemean\n        &lt;dbl&gt;       &lt;dbl&gt;\n1        5.62        5.45\n\n\nNext, let’s make our bubble chart using ggplot. x is Offensive YPP, y is DefensiveYPP, and z is wins, by season.\n\n\nCode\n#Formatting so we can show that 2024 isn't done yet in the labels\nypp &lt;- ypp |&gt;\n  mutate(season2use = ifelse(Season == \"2024\", \"2024 (7 games)\", Season))\n\n\n\n\nCode\nggplot() + \n  geom_point(\n    data=ypp, \n    aes(x=OffensiveYPP, y=DefensiveYPP, size=TotalWins), \n    color=\"red\") + #plot the means as lines to make a grid\n  geom_vline(xintercept = 5.617601) + \n  geom_hline(yintercept = 5.45072) +\n  geom_text_repel(\n    data=ypp, \n    aes(x=OffensiveYPP, y=DefensiveYPP, label=season2use)) +\n      labs(title=\"Our Best Football Years are Now, Terps\", subtitle=\"Maryland has improved its off/def efficiency since Mike Locksley joined\", caption=\"By Sam Benning\")  + theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    )\n\n\n\n\n\n\n\n\n\nThe best place to be in this plot is the bottom right, meaning the offense was producing higher-yardage plays and the defense held opponents to low yardages. Additionally, the bigger the bubble, the better.\nThose were some tough years as we left the ACC and entered the Big Ten. 2013 stands as a bit of an outlier in those years, which is when we had some NFL stars on our roster, including Stefon Diggs and Yannick Ngakoue. Sure, Maryland isn’t amongst the top teams in the country now, but every once in a while we can beat someone and storm the field. This is shown through the bubble chart - we are trending in the right direction, especially in the realm of defense. Specifically since 2019 when Coach Mike Locksley began his HC position, we see improvement. Three of four years in the bottom right quadrant of success have been in the Locksley era. But, those bubbles aren’t immensely bigger in the recent years compared to the past. The Terps have yet to break more than 8 wins since before 2011. If we want to be elite, we need to shift our quadrant by having more years in the bottom right. It just depends on what we’re satisfied with."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "sportsblog",
    "section": "",
    "text": "Collapse\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe Willard Way - Old School; Analyzing the UMD Basketball Coach’s Style\n\n\n\n\n\n\nbasketball\n\n\nMaryland\n\n\nKevin Willard\n\n\n\n\n\n\n\n\n\nNov 13, 2024\n\n\nSam Benning\n\n\n\n\n\n\n\n\n\n\n\n\nAre We Gonna Be Good? Looking Into Maryland Men’s Basketball Early Data\n\n\n\n\n\n\nbasketball\n\n\nMaryland\n\n\n\n\n\n\n\n\n\nNov 8, 2024\n\n\nSam Benning\n\n\n\n\n\n\n\n\n\n\n\n\nRunning as Slow as a Turtle: Maryland’s Run Game Is Not Succeeding\n\n\n\n\n\n\nfootball\n\n\nMaryland\n\n\n\n\n\n\n\n\n\nNov 6, 2024\n\n\nSam Benning\n\n\n\n\n\n\n\n\n\n\n\n\nMaryland VB’s Failed Ace Attack in 2023, and the Player Who Turned it Around\n\n\n\n\n\n\nvolleyball\n\n\nMaryland\n\n\n\n\n\n\n\n\n\nOct 23, 2024\n\n\nSam Benning\n\n\n\n\n\n\n\n\n\n\n\n\nNot Elite, But Not Too Bad - Comparing UMD CFB Recent Seasons\n\n\n\n\n\n\nfootball\n\n\nMaryland\n\n\n\n\n\n\n\n\n\nOct 23, 2024\n\n\nSam Benning\n\n\n\n\n\n\n\n\n\n\n\n\nDefense Wins Championships, but Offense Loses Them, Too: Big Ten Football Championship 2023\n\n\n\n\n\n\nfootball\n\n\nIowa\n\n\nMichigan\n\n\n\n\n\n\n\n\n\nOct 22, 2024\n\n\nSam Benning\n\n\n\n\n\n\n\n\n\n\n\n\nMaryland’s 2023 Loss to Illinois was a Fluke? Locksley’s Late Playcall Wasn’t as Bad as We Think\n\n\n\n\n\n\nfootball\n\n\nMaryland\n\n\n\n\n\n\n\n\n\nOct 16, 2024\n\n\nSam Benning\n\n\n\n\n\n\n\n\n\n\n\n\nSame Pond, Different Animals: The Terps may be Outplaying the Ducks This Year\n\n\n\n\n\n\nvolleyball\n\n\nMaryland\n\n\n\n\n\n\n\n\n\nOct 10, 2024\n\n\nSam Benning\n\n\n\n\n\n\n\n\n\n\n\n\nThe NCAA Failed to Shift the Speed of CFB\n\n\n\n\n\n\nfootball\n\n\nNCAA\n\n\nrule changes\n\n\n\n\n\n\n\n\n\nOct 7, 2024\n\n\nSam Benning\n\n\n\n\n\n\n\n\n\n\n\n\nFirst Post\n\n\n\n\n\n\n\n\n\n\n\nOct 3, 2024\n\n\nSam Benning\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nOct 1, 2024\n\n\nHarlow Malloc\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nSep 28, 2024\n\n\nSam Benning\n\n\n\n\n\n\nNo matching items"
  }
]