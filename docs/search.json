[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/testpost/index.html",
    "href": "posts/testpost/index.html",
    "title": "First Post",
    "section": "",
    "text": "This is my first post to this site. Here’s some pseudo-code:\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nattendance &lt;- read_csv(\"https://dwillis.github.io/sports-data-files/attendance.csv\")\n\n\nRows: 146 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): Institution, Conference\ndbl (11): 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/ maryland-oregon-vb-pts/index.html",
    "href": "posts/ maryland-oregon-vb-pts/index.html",
    "title": "Same Pond, Different Animals: The Terps are Actually Outplaying the Ducks This Year",
    "section": "",
    "text": "We don’t need to be scared just yet, Terps fans. While our beloved volleyball team has had a strong overall record (10-5), they sit at 1-3 against Big Ten opponents so far. On the other hand, new conference addition Oregon Ducks (12-2) boast a 3-1 conference record and sit in the top three in the Big Ten rankings. However, the numbers will show us that the Terps may actually be as good, or better, than their semi-aquatic competitor. In this post, we will compare point scoring data for the Terps and fellow Big Ten member Oregon Ducks to figure out who will rule the waters.\nFirst, we can load in statistics from online to RStudio. This contains all game logs and stats from each NCAA volleyball match this year. We will also use some pre-made coding libraries to help us analyze/summarize the data and create some charts.\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(ggplot2)\nlibrary(waffle)\n\n\n\n\nCode\nvb24 &lt;- read_csv(\"https://raw.githubusercontent.com/dwillis/NCAAWomensVolleyballData/main/data/ncaa_womens_volleyball_matchstats_2024.csv\")\n\n\nRows: 5235 Columns: 39\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (4): team, opponent, home_away, result\ndbl  (34): ncaa_id, team_score, opponent_score, s, kills, errors, total_atta...\ndate  (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nNow let’s take a look at all of Maryland’s games from this season, in and out of conference. We will obtain the totals for each stat that goes into points for the Terps.\n\n\nCode\nmdtotals &lt;- vb24 |&gt; filter(team == \"Maryland\") |&gt;\n  summarise(\n    kills = sum(kills),\n    blocks = sum(block_solos + block_assists),\n    aces = sum(aces),\n    opperrors = sum(defensive_errors)\n  )\n\nprint(mdtotals)\n\n\n# A tibble: 1 × 4\n  kills blocks  aces opperrors\n  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;\n1   714    253   127       323\n\n\nUsing these above numbers, we can create a vector that we can use for analysis.\n\n\nCode\nmd &lt;- c(\"Kills\" = 714, \"Blocks\" = 253, \"Aces\" = 127, \"Opponent Errors\" = 323)\n\n\nWe can create a waffle chart using this vector that will display the distribution of where Maryland’s points are coming from. This will be on a scale that is readable, thus why we divide the data in the vector by 5, making 1 square equal to 5 points scored for a given stat.\n\n\nCode\nwaffle(md/5,\n       rows = 10,\n       title = \"The Terps Make Their Money off of Kills and Aces\",\n       colors = c(\"red\",\"yellow\", \"black\", \"grey\"),\n       xlab = \"1 square = 5 points\"\n)\n\n\n\n\n\n\n\n\n\nFrom the waffle chart data, we can see that the Terps are hungry for kills and aces. more than half of their points come from these two. It may look like aces aren’t a huge factor, but that is quite a high number compared to other teams (see Oregon below). The other two stats are relatively evenly distributed, with some weight coming from their opponents screwing up - likely a product of some lower level teams that they played before conference play.\nWe will next go through the same process to obtain data for Oregon.\n\n\nCode\noretotals &lt;- vb24 |&gt; filter(team == \"Oregon\") |&gt;\n  summarise(\n    kills = sum(kills),\n    blocks = sum(block_solos + block_assists),\n    aces = sum(aces),\n    opperrors = sum(defensive_errors)\n  )\n\nprint(oretotals)\n\n\n# A tibble: 1 × 4\n  kills blocks  aces opperrors\n  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;\n1   636    269    72       299\n\n\nOne important piece to note is that Oregon has scored 223 less points than Maryland this year (derived from summing up their respective totals). This difference is accounted for as an extra column in the vector being made for Oregon, so that their chart is on the same scale as Maryland:\n\n\nCode\nore &lt;- c(\"Kills\" = 595, \"Blocks\" = 252, \"Aces\" = 69, \"Opponent Errors\" = 278, 223)\n\n\nNow, we can load in the data using our favorite food-based chart, with the color “white” adding in blank space to account for the difference so the charts look the same.\n\n\nCode\nwaffle(ore/5,\n       rows = 10,\n       title = \"Only a Sliver of Aces for the Ducks\",\n       colors = c(\"green\",\"yellow\", \"black\", \"grey\", \"white\"),\n       xlab = \"1 square = 5 points\"\n)\n\n\n\n\n\n\n\n\n\nLook at that small slice that takes up aces! The Ducks have not been scoring much from their serving - the Terps appear to have doubled them in this stat. The other proportions show to be relatively even, but the Ducks have not kept up with the Terps this year when it comes to their offensive attack.\nAs mentioned, this is from all of the season. Oregon has done quite well this year in-conference, and Maryland quite the opposite. So, let’s see if these trends hold true in conference play:\nWe will make the same summary and vectors for each team, but will filter for games against Big Ten opponents, which have been their last four games (after September 22nd).\n\n\nCode\nmdconftotals &lt;- vb24 |&gt; filter(team == \"Maryland\", date&gt;\"2024-09-22\") |&gt;\n  summarise(\n    kills = sum(kills),\n    blocks = sum(block_solos + block_assists),\n    aces = sum(aces),\n    opperrors = sum(defensive_errors)\n  )\nprint(mdconftotals)\n\n\n# A tibble: 1 × 4\n  kills blocks  aces opperrors\n  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;\n1   202     71    38        85\n\n\n\n\nCode\nmdconf &lt;- c(\"Kills\" = 202, \"Blocks\" = 71, \"Aces\" = 38, \"Opponent Errors\" = 85)\n\n\nSince there are less games for just conference play, we can make our scale different so that visually the waffle charts look similar for this data. Now, each square is only worth 2 points (as we divided the vector by 2), but we can still see the distribution and weights of each stat.\n\n\nCode\nwaffle(mdconf/2,\n       rows = 8,\n       title = \"Terps Still Dominating the Attack in Big Ten\",\n       colors = c(\"red\",\"yellow\", \"black\", \"grey\"),\n       xlab = \"1 square = 2 points\"\n)\n\n\n\n\n\n\n\n\n\nWell, it looks like Maryland holds pretty much the same standards for itself in Big Ten matchups. Those aces are doing a good amount of damage. I was clearly wrong in my analysis of opponent errors as well - Power Five teams still make errors, too. Let’s see how Oregon compares.\n\n\nCode\noreconftotals &lt;- vb24 |&gt; filter(team == \"Oregon\", date&gt;\"2024-09-22\") |&gt;\n  summarise(\n    kills = sum(kills),\n    blocks = sum(block_solos + block_assists),\n    aces = sum(aces),\n    opperrors = sum(defensive_errors)\n  )\nprint(oreconftotals)\n\n\n# A tibble: 1 × 4\n  kills blocks  aces opperrors\n  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;\n1   215     84    23        96\n\n\n\n\nCode\noreconf &lt;- c(\"Kills\" = 174, \"Blocks\" = 67, \"Aces\" = 20, \"Opponent Errors\" = 75, 60)\n\n\nThrough 4 games, Maryland has also scored 63 more points than Oregon in Big Ten play. We account for that again.\n\n\nCode\nwaffle(oreconf/2,\n       rows = 8,\n       title = \"Ducks Still Aren't Serving up Aces In-Conference\",\n       colors = c(\"green\",\"yellow\", \"black\", \"grey\", \"white\"),\n       xlab = \"1 square = 2 points\"\n)\n\n\n\n\n\n\n\n\n\nThose Aces really aren’t helping them out much either. As we see, Maryland is again nearly doubling Oregon in this number. Yet, Oregon has a better record and have built some momentum moving forward. The Terps maintain a high-powered attack but there is something in between the lines that we would need to learn more about to figure out why they don’t have as good of a record as we may expect. Nevertheless, there is much hope for this Maryland team, as these numbers show that there is great potential.\nWhen looking closer into their records over the course of the season, Oregon has played 10 fewer sets than Maryland. They have either blown teams out, or have been blown out, with only 4 of their games going more than 3 sets. Maryland has hung in there with some big-time opponents, taking a set off of #3 Penn State. Otherwise, they are consistently average to above average; they have a tough time finishing (mediocre) teams off. If Maryland can find balance in the rest of its attack, there’s a high ceiling to make some magic happen. Oregon, while relatively up and down, has found themselves ranked amongst the best teams in the country. So, is consistency key for the Terps, or will the boom/bust system keep the Ducks rolling? It’ll be interesting to see which holds better over the rest of the season."
  },
  {
    "objectID": "posts/big-ten-plays/index.html",
    "href": "posts/big-ten-plays/index.html",
    "title": "The NCAA Failed to Shift the Speed of CFB",
    "section": "",
    "text": "This is a post presenting the tempo of Big Ten Football teams from the 2023 and 2024 seasons. We will be exploring the number of plays called per game by each team to examine the clock stoppage rule changes across the NCAA.\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nfootballlogs23 &lt;- read_csv(\"~/Downloads/footballlogs23 (5).csv\")\n\n\nRows: 1702 Columns: 54\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con...\ndbl  (45): Game, PassingCmp, PassingAtt, PassingPct, PassingYds, PassingTD, ...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nfootballlogs24 &lt;- read_csv(\"~/Downloads/footballlogs24.csv\")\n\n\nRows: 704 Columns: 54\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con...\ndbl  (45): Game, PassingCmp, PassingAtt, PassingPct, PassingYds, PassingTD, ...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nCode\nbigten23 &lt;- footballlogs23 |&gt; filter(Conference==\"Big Ten Conference\")\n\nbigten24 &lt;- footballlogs24 |&gt; filter(Conference==\"Big Ten Conference\")\n\n\n\n\nCode\navgplays23 &lt;- bigten23 |&gt; group_by(TeamFull) |&gt;\n  summarise(\n  avgoffplays23 = mean(OffensivePlays)\n) |&gt;\narrange(desc(avgoffplays23))\n\n\n\n\nCode\navgplays23 |&gt;\nggplot() + \n  geom_bar(\n    data=avgplays23, \n    aes(x=reorder(TeamFull,avgoffplays23), weight=avgoffplays23)\n  ) +\n  labs(\n    title = \"Average Offensive Plays per Game, Big Ten 2023\",\n    y = \"Average Plays per Game\",\n    x = \"Team\"\n  ) +\n  coord_flip()\n\n\n\n\n\n\n\n\n\nLast year, we see a pretty average spread, with teams running somewhere between 60 and 70 plays. There isn’t much correlation with success and plays ran though, as Michigan stands at the bottom, OSU in the middle, and PSU at the top. Let’s check out this year’s data:\n\n\nCode\navgplays24 &lt;- bigten24 |&gt; group_by(TeamFull) |&gt;\n  summarise(\n  avgoffplays24 = mean(OffensivePlays)\n) |&gt;\narrange(desc(avgoffplays24))\n\n\n\n\nCode\navgplays24 |&gt;\nggplot() + \n  geom_bar(\n    data=avgplays24, \n    aes(x=reorder(TeamFull,avgoffplays24), weight=avgoffplays24)\n  ) +\n  labs(\n    title = \"Average Offensive Plays per Game, Big Ten 2024\",\n    y = \"Average Plays per Game\",\n    x = \"Team\"\n  ) +\n  coord_flip()\n\n\n\n\n\n\n\n\n\nSome side notes: Aside from the evaluation of the play clock, a few things stand out. When it comes down to good vs. great, maybe less is more - Michigan has ran many fewer plays over than a lot of its peers over the past two years. Penn State (who ran the most plays in 2023) are clearly trying to chase their rival up north and has moved down to the middle of the pack. It has certainly worked for them through the first half of the season. This can also be a product of great offense - the more you score, the less plays you run.\nIn terms of the rule change affecting this year’s style of play, the majority of the teams (excluding Purdue) generally held pretty consistent in terms of how many plays they have run year-over-year. When it comes to overall success, the new rule doesn’t have much effect either because we see that great teams can run many plays or few plays and still be successful (again, Michigan at the bottom, OSU/PSU in the middle, and now Oregon at the top). The NCAA can try to change the rules, but they can’t seem to change how its teams play."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "sportsblog",
    "section": "",
    "text": "Collapse\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSame Pond, Different Animals: The Terps may be Outplaying the Ducks This Year\n\n\n\n\n\n\nvolleyball\n\n\nMaryland\n\n\n\n\n\n\n\n\n\nOct 10, 2024\n\n\nSam Benning\n\n\n\n\n\n\n\n\n\n\n\n\nThe NCAA Failed to Shift the Speed of CFB\n\n\n\n\n\n\nfootball\n\n\nNCAA\n\n\nrule changes\n\n\n\n\n\n\n\n\n\nOct 7, 2024\n\n\nSam Benning\n\n\n\n\n\n\n\n\n\n\n\n\nFirst Post\n\n\n\n\n\n\n\n\n\n\n\nOct 3, 2024\n\n\nSam Benning\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nOct 1, 2024\n\n\nHarlow Malloc\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nSep 28, 2024\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  }
]