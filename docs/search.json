[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/testpost/index.html",
    "href": "posts/testpost/index.html",
    "title": "First Post",
    "section": "",
    "text": "This is my first post to this site. Here’s some pseudo-code:\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nattendance &lt;- read_csv(\"https://dwillis.github.io/sports-data-files/attendance.csv\")\n\n\nRows: 146 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): Institution, Conference\ndbl (11): 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "posts/big-ten-plays/index.html",
    "href": "posts/big-ten-plays/index.html",
    "title": "The NCAA Failed to Shift the Speed of CFB",
    "section": "",
    "text": "This is a post presenting the tempo of Big Ten Football teams from the 2023 and 2024 seasons. We will be exploring the number of plays called per game by each team to examine the clock stoppage rule changes across the NCAA.\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nfootballlogs23 &lt;- read_csv(\"~/Downloads/footballlogs23 (5).csv\")\n\n\nRows: 1702 Columns: 54\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con...\ndbl  (45): Game, PassingCmp, PassingAtt, PassingPct, PassingYds, PassingTD, ...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nfootballlogs24 &lt;- read_csv(\"~/Downloads/footballlogs24.csv\")\n\n\nRows: 704 Columns: 54\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (8): HomeAway, Opponent, Result, TeamFull, TeamURL, Outcome, Team, Con...\ndbl  (45): Game, PassingCmp, PassingAtt, PassingPct, PassingYds, PassingTD, ...\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nCode\nbigten23 &lt;- footballlogs23 |&gt; filter(Conference==\"Big Ten Conference\")\n\nbigten24 &lt;- footballlogs24 |&gt; filter(Conference==\"Big Ten Conference\")\n\n\n\n\nCode\navgplays23 &lt;- bigten23 |&gt; group_by(TeamFull) |&gt;\n  summarise(\n  avgoffplays23 = mean(OffensivePlays)\n) |&gt;\narrange(desc(avgoffplays23))\n\n\n\n\nCode\navgplays23 |&gt;\nggplot() + \n  geom_bar(\n    data=avgplays23, \n    aes(x=reorder(TeamFull,avgoffplays23), weight=avgoffplays23)\n  ) +\n  labs(\n    title = \"Average Offensive Plays per Game, Big Ten 2023\",\n    y = \"Average Plays per Game\",\n    x = \"Team\"\n  ) +\n  coord_flip()\n\n\n\n\n\n\n\n\n\nLast year, we see a pretty average spread, with teams running somewhere between 60 and 70 plays. There isn’t much correlation with success and plays ran though, as Michigan stands at the bottom, OSU in the middle, and PSU at the top. Let’s check out this year’s data:\n\n\nCode\navgplays24 &lt;- bigten24 |&gt; group_by(TeamFull) |&gt;\n  summarise(\n  avgoffplays24 = mean(OffensivePlays)\n) |&gt;\narrange(desc(avgoffplays24))\n\n\n\n\nCode\navgplays24 |&gt;\nggplot() + \n  geom_bar(\n    data=avgplays24, \n    aes(x=reorder(TeamFull,avgoffplays24), weight=avgoffplays24)\n  ) +\n  labs(\n    title = \"Average Offensive Plays per Game, Big Ten 2024\",\n    y = \"Average Plays per Game\",\n    x = \"Team\"\n  ) +\n  coord_flip()\n\n\n\n\n\n\n\n\n\nSome side notes: Aside from the evaluation of the play clock, a few things stand out. When it comes down to good vs. great, maybe less is more - Michigan has ran many fewer plays over than a lot of its peers over the past two years. Penn State (who ran the most plays in 2023) are clearly trying to chase their rival up north and has moved down to the middle of the pack. It has certainly worked for them through the first half of the season. This can also be a product of great offense - the more you score, the less plays you run.\nIn terms of the rule change affecting this year’s style of play, the majority of the teams (excluding Purdue) generally held pretty consistent in terms of how many plays they have run year-over-year. When it comes to overall success, the new rule doesn’t have much effect either because we see that great teams can run many plays or few plays and still be successful (again, Michigan at the bottom, OSU/PSU in the middle, and now Oregon at the top). The NCAA can try to change the rules, but they can’t seem to change how its teams play."
  },
  {
    "objectID": "posts/ maryland-oregon-vb-pts/index.html",
    "href": "posts/ maryland-oregon-vb-pts/index.html",
    "title": "Same Pond, Different Animals: The Terps are Actually Outplaying the Ducks This Year",
    "section": "",
    "text": "We don’t need to be scared just yet, Terps fans. While our beloved volleyball team has had a strong overall record (10-5), they sit at 1-3 against Big Ten opponents so far. On the other hand, new conference addition Oregon Ducks (12-2) boast a 3-1 conference record and sit in the top three in the Big Ten rankings. However, the numbers will show us that the Terps may actually be as good, or better, than their semi-aquatic competitor. In this post, we will compare point scoring data for the Terps and fellow Big Ten member Oregon Ducks to figure out who will rule the waters.\nFirst, we can load in statistics from online to RStudio. This contains all game logs and stats from each NCAA volleyball match this year. We will also use some pre-made coding libraries to help us analyze/summarize the data and create some charts.\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(ggplot2)\nlibrary(waffle)\n\n\n\n\nCode\nvb24 &lt;- read_csv(\"https://raw.githubusercontent.com/dwillis/NCAAWomensVolleyballData/main/data/ncaa_womens_volleyball_matchstats_2024.csv\")\n\n\nRows: 5235 Columns: 39\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (4): team, opponent, home_away, result\ndbl  (34): ncaa_id, team_score, opponent_score, s, kills, errors, total_atta...\ndate  (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nNow let’s take a look at all of Maryland’s games from this season, in and out of conference. We will obtain the totals for each stat that goes into points for the Terps.\n\n\nCode\nmdtotals &lt;- vb24 |&gt; filter(team == \"Maryland\") |&gt;\n  summarise(\n    kills = sum(kills),\n    blocks = sum(block_solos + block_assists),\n    aces = sum(aces),\n    opperrors = sum(defensive_errors)\n  )\n\nprint(mdtotals)\n\n\n# A tibble: 1 × 4\n  kills blocks  aces opperrors\n  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;\n1   714    253   127       323\n\n\nUsing these above numbers, we can create a vector that we can use for analysis.\n\n\nCode\nmd &lt;- c(\"Kills\" = 714, \"Blocks\" = 253, \"Aces\" = 127, \"Opponent Errors\" = 323)\n\n\nWe can create a waffle chart using this vector that will display the distribution of where Maryland’s points are coming from. This will be on a scale that is readable, thus why we divide the data in the vector by 5, making 1 square equal to 5 points scored for a given stat.\n\n\nCode\nwaffle(md/5,\n       rows = 10,\n       title = \"The Terps Make Their Money off of Kills and Aces\",\n       colors = c(\"red\",\"yellow\", \"black\", \"grey\"),\n       xlab = \"1 square = 5 points\"\n)\n\n\n\n\n\n\n\n\n\nFrom the waffle chart data, we can see that the Terps are hungry for kills and aces. more than half of their points come from these two. It may look like aces aren’t a huge factor, but that is quite a high number compared to other teams (see Oregon below). The other two stats are relatively evenly distributed, with some weight coming from their opponents screwing up - likely a product of some lower level teams that they played before conference play.\nWe will next go through the same process to obtain data for Oregon.\n\n\nCode\noretotals &lt;- vb24 |&gt; filter(team == \"Oregon\") |&gt;\n  summarise(\n    kills = sum(kills),\n    blocks = sum(block_solos + block_assists),\n    aces = sum(aces),\n    opperrors = sum(defensive_errors)\n  )\n\nprint(oretotals)\n\n\n# A tibble: 1 × 4\n  kills blocks  aces opperrors\n  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;\n1   636    269    72       299\n\n\nOne important piece to note is that Oregon has scored 223 less points than Maryland this year (derived from summing up their respective totals). This difference is accounted for as an extra column in the vector being made for Oregon, so that their chart is on the same scale as Maryland:\n\n\nCode\nore &lt;- c(\"Kills\" = 595, \"Blocks\" = 252, \"Aces\" = 69, \"Opponent Errors\" = 278, 223)\n\n\nNow, we can load in the data using our favorite food-based chart, with the color “white” adding in blank space to account for the difference so the charts look the same.\n\n\nCode\nwaffle(ore/5,\n       rows = 10,\n       title = \"Only a Sliver of Aces for the Ducks\",\n       colors = c(\"green\",\"yellow\", \"black\", \"grey\", \"white\"),\n       xlab = \"1 square = 5 points\"\n)\n\n\n\n\n\n\n\n\n\nLook at that small slice that takes up aces! The Ducks have not been scoring much from their serving - the Terps appear to have doubled them in this stat. The other proportions show to be relatively even, but the Ducks have not kept up with the Terps this year when it comes to their offensive attack.\nAs mentioned, this is from all of the season. Oregon has done quite well this year in-conference, and Maryland quite the opposite. So, let’s see if these trends hold true in conference play:\nWe will make the same summary and vectors for each team, but will filter for games against Big Ten opponents, which have been their last four games (after September 22nd).\n\n\nCode\nmdconftotals &lt;- vb24 |&gt; filter(team == \"Maryland\", date&gt;\"2024-09-22\") |&gt;\n  summarise(\n    kills = sum(kills),\n    blocks = sum(block_solos + block_assists),\n    aces = sum(aces),\n    opperrors = sum(defensive_errors)\n  )\nprint(mdconftotals)\n\n\n# A tibble: 1 × 4\n  kills blocks  aces opperrors\n  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;\n1   202     71    38        85\n\n\n\n\nCode\nmdconf &lt;- c(\"Kills\" = 202, \"Blocks\" = 71, \"Aces\" = 38, \"Opponent Errors\" = 85)\n\n\nSince there are less games for just conference play, we can make our scale different so that visually the waffle charts look similar for this data. Now, each square is only worth 2 points (as we divided the vector by 2), but we can still see the distribution and weights of each stat.\n\n\nCode\nwaffle(mdconf/2,\n       rows = 8,\n       title = \"Terps Still Dominating the Attack in Big Ten\",\n       colors = c(\"red\",\"yellow\", \"black\", \"grey\"),\n       xlab = \"1 square = 2 points\"\n)\n\n\n\n\n\n\n\n\n\nWell, it looks like Maryland holds pretty much the same standards for itself in Big Ten matchups. Those aces are doing a good amount of damage. I was clearly wrong in my analysis of opponent errors as well - Power Five teams still make errors, too. Let’s see how Oregon compares.\n\n\nCode\noreconftotals &lt;- vb24 |&gt; filter(team == \"Oregon\", date&gt;\"2024-09-22\") |&gt;\n  summarise(\n    kills = sum(kills),\n    blocks = sum(block_solos + block_assists),\n    aces = sum(aces),\n    opperrors = sum(defensive_errors)\n  )\nprint(oreconftotals)\n\n\n# A tibble: 1 × 4\n  kills blocks  aces opperrors\n  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;\n1   215     84    23        96\n\n\n\n\nCode\noreconf &lt;- c(\"Kills\" = 174, \"Blocks\" = 67, \"Aces\" = 20, \"Opponent Errors\" = 75, 60)\n\n\nThrough 4 games, Maryland has also scored 63 more points than Oregon in Big Ten play. We account for that again.\n\n\nCode\nwaffle(oreconf/2,\n       rows = 8,\n       title = \"Ducks Still Aren't Serving up Aces In-Conference\",\n       colors = c(\"green\",\"yellow\", \"black\", \"grey\", \"white\"),\n       xlab = \"1 square = 2 points\"\n)\n\n\n\n\n\n\n\n\n\nThose Aces really aren’t helping them out much either. As we see, Maryland is again nearly doubling Oregon in this number. Yet, Oregon has a better record and have built some momentum moving forward. The Terps maintain a high-powered attack but there is something in between the lines that we would need to learn more about to figure out why they don’t have as good of a record as we may expect. Nevertheless, there is much hope for this Maryland team, as these numbers show that there is great potential.\nWhen looking closer into their records over the course of the season, Oregon has played 10 fewer sets than Maryland. They have either blown teams out, or have been blown out, with only 4 of their games going more than 3 sets. Maryland has hung in there with some big-time opponents, taking a set off of #3 Penn State. Otherwise, they are consistently average to above average; they have a tough time finishing (mediocre) teams off. If Maryland can find balance in the rest of its attack, there’s a high ceiling to make some magic happen. Oregon, while relatively up and down, has found themselves ranked amongst the best teams in the country. So, is consistency key for the Terps, or will the boom/bust system keep the Ducks rolling? It’ll be interesting to see which holds better over the rest of the season."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/third-and-six/index.html",
    "href": "posts/third-and-six/index.html",
    "title": "Maryland’s 2023 Loss to Illinois was a Fluke? Locksley’s Late Playcall Wasn’t as Bad as We Think",
    "section": "",
    "text": "Many Terp fans remember last football season when Coach Mike Locksley dialed up an infamous 0 yard rush play on 3rd and 6 inside the Illinois 30-yard line that led to a field goal to tie the game. This was followed by an Illinois game-winning field goal as time expired, and Maryland lost 27-24 at home to last year’s Big Ten West bottomfeeder. Professor Willis, who leads our JOUR479X class, described the “collective groan” that came from the home crowd as they watched the game slip away from them in a notoriously dull fashion. We were all understandably displeased with the play call, and its outcome. But there had to be some thought that came from this decision for Coach Locks, right? After doing some data analysis, it seems like he had the right idea in mind.\nIn order to do so, we must first load in the proper libraries to analyze college football data game logs from the past 6 years (ie. the Locksley era at Maryland).\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(cfbfastR)\n\nseasons &lt;- load_cfb_pbp(\n  seasons = c(2019,2020,2021,2022,2023,2024)\n)\n\n\nIn order to see how good/bad his decision was, we can analyze what everybody else in the NCAA has done in the exact same scenario. We can create a variable that includes only 3rd and 6 plays.\n\n\nCode\nthird_and_six &lt;- seasons|&gt; filter(down == \"3\", distance == \"6\")\n\n\nThere have been 15,661 times that this exact scenario has occured since 2019. We can look further into that and learn about what has happened on these plays, by using the group_by and summarize functions.\n\n\nCode\nthird_and_six |&gt; group_by(play_type) |&gt; \n  summarize(\n    count = n()\n  ) |&gt;\narrange(desc(count))\n\n\n# A tibble: 22 × 2\n   play_type                  count\n   &lt;chr&gt;                      &lt;int&gt;\n 1 Pass Reception              4676\n 2 Pass Incompletion           3866\n 3 Rush                        3173\n 4 Penalty                     1068\n 5 Timeout                      929\n 6 Sack                         800\n 7 Passing Touchdown            496\n 8 Interception Return          257\n 9 Rushing Touchdown            135\n10 Fumble Recovery (Opponent)   101\n# ℹ 12 more rows\n\n\nI thoroughly enjoyed learning that there have been two blocked field goals on third and six since 2019. Must’ve been at the end of a half/game.\nNow, let’s check out how often teams actually run the ball in this scenario - just to check if we are even in the right realm.\n\n\nCode\nthird_and_six_runs &lt;- third_and_six |&gt; filter(rush == \"1\")\n\ntotal_runs &lt;- third_and_six_runs |&gt;\n  summarize(\n    count = n()\n  ) |&gt;\n  pluck(1)\n\ntotal_runs/15661\n\n\n[1] 0.2163974\n\n\n21.64% of play calls on 3rd and 6 have been runs over the past 6 seasons. So most of the NCAA thinks that we should not have ran the ball. Now, to back this up, let’s see how successful these teams have been in this situation.\nWhether run or pass, we want to see the average yards gained on all of these\n\n\nCode\nthird_and_six |&gt;\n  summarise(\n    average_yds = mean(yards_gained))\n\n\n# A tibble: 1 × 1\n  average_yds\n        &lt;dbl&gt;\n1        5.20\n\n\nTeams almost get there, averaging about 5 yards per play on 3rd and 6. Usually any team would be satisfied with a 5 yard gain, but not in this scenario. I mean, I’m sure many defenses are pretty much just protecting that first down line.\nI’m going to try and help Coach Locks out here - we are going to check the average number of yards for each run play, too. Maybe it will show us that teams who run the ball on 3rd and 6 usually get there…\nTo do so, I found a variable in the dataset called “rush” which is a binary variable, labeled ‘1’ if a team ran the ball on a given play, and ‘0’ if they didn’t. We can use this variable to help us out.\n\n\nCode\nthird_and_six |&gt; filter(rush == \"1\") |&gt;\n  summarise(\n    average_yds = mean(yards_gained))\n\n\n# A tibble: 1 × 1\n  average_yds\n        &lt;dbl&gt;\n1        6.08\n\n\nHonestly, I’m surprised. I guess defenses were surprised as well. Of the 1 in every 5 or so times a run is called, it is expected to be successful in getting a first down (by this measure). We’re still not quite at a conclusion yet, though. We want to gather some more information first.\nFirst, who is leading the pack in run calls on third and six?\n\n\nCode\nthird_and_six |&gt; group_by(pos_team) |&gt; filter(rush == \"1\") |&gt;\n  summarise(\n    runcalls = n()\n  ) |&gt;\narrange(desc(runcalls))\n\n\n# A tibble: 280 × 2\n   pos_team         runcalls\n   &lt;chr&gt;               &lt;int&gt;\n 1 Navy                   60\n 2 Army                   51\n 3 Air Force              42\n 4 Georgia Southern       35\n 5 New Mexico             32\n 6 Ole Miss               31\n 7 Kent State             30\n 8 Baylor                 29\n 9 Georgia Tech           29\n10 Louisiana              29\n# ℹ 270 more rows\n\n\nNavy tops off the list, of course, with 60 runs on 3rd and 6. Besides the other teams that we’d expect (Army and Air Force), Georgia Southern comes in at 35 runs on 3rd and 6 over the past 6 seasons. While there are some decent teams at the top of this list, I can’t say that there are any championship-level offenses that operate by running the ball a lot on 3rd and 6. Coach Locksley may not be alone with that confident play call, however he is surrounded by mediocrity.\nWe can now get more specific and see what Maryland has done year-by-year since Mike Locksley was hired in 2019 in this scenario. It will be pretty much the same programming, but now we just have to filter so that we are only looking at Maryland. Additionally, let’s check out how many yards we gained per season on third and six.\n\n\nCode\nthird_and_six |&gt; group_by(pos_team,year) |&gt; filter(rush == \"1\",pos_team == \"Maryland\") |&gt;\n  summarise(\n    runcalls = n(),\n    yards = sum(yards_gained)\n  )\n\n\n`summarise()` has grouped output by 'pos_team'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 5 × 4\n# Groups:   pos_team [1]\n  pos_team  year runcalls yards\n  &lt;chr&gt;    &lt;int&gt;    &lt;int&gt; &lt;dbl&gt;\n1 Maryland  2019        1     3\n2 Maryland  2021        4    26\n3 Maryland  2022        6    36\n4 Maryland  2023        5    39\n5 Maryland  2024        1     5\n\n\nWow, we had a decent three-year stretch from 2021-2023 where our men seemed to be holding their own on these plays. Coach Locksley might have a point with what he was doing. Let’s zoom back out to include the scenario that we are passing, though. It is more useful for us to see if we should’ve passed based on how well we’ve done when not calling runs.\nWe can first look at every third and six play for Maryland and sort it by play_type so we can see the different distributions.\n\n\nCode\nthird_and_six |&gt; filter(pos_team == \"Maryland\") |&gt; group_by(play_type) |&gt;\n  summarize(\n    count = n()\n  )\n\n\n# A tibble: 11 × 2\n   play_type                  count\n   &lt;chr&gt;                      &lt;int&gt;\n 1 Field Goal Good                1\n 2 Fumble Recovery (Opponent)     2\n 3 Interception Return            1\n 4 Pass Incompletion             13\n 5 Pass Reception                20\n 6 Passing Touchdown              4\n 7 Penalty                        5\n 8 Rush                          16\n 9 Rushing Touchdown              1\n10 Sack                           6\n11 Timeout                        3\n\n\nTo do more analysis, we need to just use “regular” plays - ie. we don’t need to include field goals, timeouts, etc.). With the above summary, we have figured out every play type so we know what to select/filter by (done below):\n\n\nCode\nthird_and_six_md &lt;- third_and_six |&gt; filter(pos_team == \"Maryland\", play_type %in% c(\"Rush\", \"Rushing Touchdown\", \"Pass Incompletion\", \"Pass Reception\", \"Passing Touchdown\", \"Sack\"))\n\nthird_and_six_md_gains &lt;- third_and_six_md |&gt; select(year, week, def_pos_team, yards_gained, play_type, clock.minutes, period, yards_to_goal, rush)\nthird_and_six_md_gains\n\n\n────────────────────────────────────────────────────────────── cfbfastR 1.9.5 ──\n\n\n# A tibble: 60 × 9\n    year  week def_pos_team yards_gained play_type         clock.minutes period\n   &lt;int&gt; &lt;int&gt; &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;                     &lt;int&gt;  &lt;int&gt;\n 1  2019     1 Howard                  3 Rush                          7      3\n 2  2019     2 Syracuse                7 Pass Reception                6      3\n 3  2019     5 Penn State             18 Pass Reception               15      4\n 4  2019     9 Minnesota              -7 Sack                         10      1\n 5  2020     8 Northwestern            0 Pass Incompletion             8      2\n 6  2020     9 Minnesota               5 Pass Reception               10      2\n 7  2020     9 Minnesota              15 Pass Reception               10      4\n 8  2020     9 Minnesota             -16 Sack                          7      4\n 9  2020    10 Penn State             62 Passing Touchdown             0      1\n10  2020    10 Penn State              7 Pass Reception                6      2\n# ℹ 50 more rows\n# ℹ 2 more variables: yards_to_goal &lt;dbl&gt;, rush &lt;dbl&gt;\n\n\nNow we can see every individual log for when the Terps had this situation - I included some notable key factors that may play a part in our decision to support or hate Coach Locksley.\n\n\nCode\nthird_and_six_md_gains |&gt; group_by(rush) |&gt;\n  summarise(\n    count = n()\n    )\n\n\n# A tibble: 2 × 2\n   rush count\n  &lt;dbl&gt; &lt;int&gt;\n1     0    43\n2     1    17\n\n\nRemember, 1 is rush, 0 is not. Of the 60 times that Maryland has had a third and six situation in the Locksley era, they have passed it quite a bit more. But how often have we converted? Let’s map each gain on a scatterplot so we can visualize if passes or runs have been getting us more yardage over time.\nIn our case, since we selected only runs and passes, we can use the mutate() function to add a new variable (which I named play_call) which is a categorical variable that doesn’t just list a play as a 0 or a 1, or a pass completion/sack/etc, but instead just a run or a pass.\n\n\nCode\nthird_and_six_md_gains &lt;- third_and_six_md_gains |&gt; \n  mutate(play_call = ifelse(rush == 1, \"Rush\", \"Pass\"))\n\nhead(third_and_six_md_gains)\n\n\n────────────────────────────────────────────────────────────── cfbfastR 1.9.5 ──\n\n\n# A tibble: 6 × 10\n   year  week def_pos_team yards_gained play_type         clock.minutes period\n  &lt;int&gt; &lt;int&gt; &lt;chr&gt;               &lt;dbl&gt; &lt;chr&gt;                     &lt;int&gt;  &lt;int&gt;\n1  2019     1 Howard                  3 Rush                          7      3\n2  2019     2 Syracuse                7 Pass Reception                6      3\n3  2019     5 Penn State             18 Pass Reception               15      4\n4  2019     9 Minnesota              -7 Sack                         10      1\n5  2020     8 Northwestern            0 Pass Incompletion             8      2\n6  2020     9 Minnesota               5 Pass Reception               10      2\n# ℹ 3 more variables: yards_to_goal &lt;dbl&gt;, rush &lt;dbl&gt;, play_call &lt;chr&gt;\n\n\nNow we can make our desired plot, with a number of different formatting techniques to make this readable for us. I tried to make a bit of a field for us, so that we can visualize a team getting.a first down.\n\n\nCode\nggplot(third_and_six_md_gains, aes(x = year, y = yards_gained, color = play_call)) +\n  geom_point(size = 2) + \n  scale_x_continuous(limits = c(2019,2024)) +\n  geom_hline(yintercept = 6, color = \"yellow\") +\n  geom_hline(yintercept = 0, color = \"blue\") + \n  annotate(\"text\", x=2023.5, y=8, label=\"1st Down\") +\n  annotate(\"text\", x=2019, y=-3, label=\"LOS\") +\n  labs(title = \"Hemby Brings in the Runs\",\n       x = \"Year\") +\n   scale_color_manual(values = c(\"Rush\" = \"black\", \"Pass\" = \"red\")) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nIn the past, Coach Locksley was extremely pass-heavy, but in 2022 when we began to use RB Roman Hemby, there seemed to be a shift in the playcalling. Either way, there doesn’t seem to be much matter whether we run or pass the ball as to if we get the yards we need.\nLet’s zoom in to look at data from last three years (the Hemby era). All we have to do is filter the years 2023 and 2024, and do the same thing again. We will use this to make our final conclusion to see if Coach Locksley could’ve passed the ball to win us the game.\n\n\nCode\nthird_and_six_md_gains_recent &lt;- third_and_six_md_gains |&gt; filter(year %in% c(2022,2023,2024)) |&gt;\n  mutate(play_call = ifelse(rush == 1, \"Rush\", \"Pass\"))\n\n# Create the plot\nggplot(third_and_six_md_gains_recent, aes(x = year, y = yards_gained, color = play_call)) +\n  geom_point(size = 2) + \n  scale_x_continuous(limits = c(2022,2025)) +\n  geom_hline(yintercept = 6, color = \"yellow\") +\n  geom_hline(yintercept = 0, color = \"blue\") + \n  annotate(\"text\", x=2024, y=8, label=\"1st Down\") +\n  annotate(\"text\", x=2023, y=-3, label=\"LOS\") +\n  labs(title = \"There is No True Tell of What Gets Us the Yards\",\n       x = \"Year\") +\n   scale_color_manual(values = c(\"Rush\" = \"black\", \"Pass\" = \"red\")) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nFrom this chart, there seems to be a pretty equal chance that we’d get the first whether we ran or passed the ball. But, contrary to initial fan belief that we should not have run that ball last October, it was just as good a call as any other play in the book…the runs get us there about half the time, as do pass plays. Additionally, many big pass plays there were, there were just as many losses or insufficient gains. So, Coach Locksley is off the hook, and he may have even had a good case that we should’ve ran the ball in that scenario. Maybe the solution would be to figure it out on the first two plays so that we aren’t in this scenario too often… I mean, it looks like this may happen at least once a game to the Terps, and I’d rather not flip a coin to estimate if we were going to get a first down or not…Especially if the game is on the line. At least third and six puts us far enough away from a potential first down so that we don’t have to watch a Billy Edwards tush push."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "sportsblog",
    "section": "",
    "text": "Collapse\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMaryland’s 2023 Loss to Illinois was a Fluke? Locksley’s Late Playcall Wasn’t as Bad as We Think\n\n\n\n\n\n\nfootball\n\n\nMaryland\n\n\n\n\n\n\n\n\n\nOct 16, 2024\n\n\nSam Benning\n\n\n\n\n\n\n\n\n\n\n\n\nSame Pond, Different Animals: The Terps may be Outplaying the Ducks This Year\n\n\n\n\n\n\nvolleyball\n\n\nMaryland\n\n\n\n\n\n\n\n\n\nOct 10, 2024\n\n\nSam Benning\n\n\n\n\n\n\n\n\n\n\n\n\nThe NCAA Failed to Shift the Speed of CFB\n\n\n\n\n\n\nfootball\n\n\nNCAA\n\n\nrule changes\n\n\n\n\n\n\n\n\n\nOct 7, 2024\n\n\nSam Benning\n\n\n\n\n\n\n\n\n\n\n\n\nFirst Post\n\n\n\n\n\n\n\n\n\n\n\nOct 3, 2024\n\n\nSam Benning\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nOct 1, 2024\n\n\nHarlow Malloc\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nSep 28, 2024\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  }
]